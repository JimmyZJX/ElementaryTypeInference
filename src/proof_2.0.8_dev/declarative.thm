Import "rules".

Theorem append_prune : forall A B AB, nabla (x : ty),
	append (A x) (B x) AB -> exists FA FB, A = x\FA /\ B = x\FB.
induction on 1. intros. case H1. search.
	apply IH to H2. search.

Theorem append_prune_AB : forall A B AB, nabla (x : ty),
	append A B (AB x) -> exists FAB, AB = x\FAB.
induction on 1. intros. case H1. search.
	apply IH to H2. search.

Theorem append_prune_tm : forall A B AB, nabla (x : tm),
	append (A x) (B x) AB -> exists FA FB, A = x\FA /\ B = x\FB.
induction on 1. intros. case H1. search.
	apply IH to H2. search.

Theorem append_prune_AB_tm : forall A B AB, nabla (x : tm),
	append A B (AB x) -> exists FAB, AB = x\FAB.
induction on 1. intros. case H1. search.
	apply IH to H2. search.


Theorem member_prune : forall (E : olist) B, nabla (x : ty),
	member (B x) E -> exists Fr, B = x\Fr.
induction on 1. intros. case H1.
	search. apply IH to H2. search.

Theorem member_prune_tm : forall (E : olist) B, nabla (x : tm),
	member (B x) E -> exists Fr, B = x\Fr.
induction on 1. intros. case H1.
	search. apply IH to H2. search.

Theorem env_weaken : forall FE F E, append F E FE -> env FE -> env E.
induction on 2. intros. case H2.
	case H1. search.
	case H1. search. backchain IH.
	case H1. search. backchain IH.

% Weakening
Theorem wft_weaken : forall E F G T EG EFG,
	append E G EG -> split3 E F G EFG ->
	wft EG T -> wft EFG T.
induction on 3. intros. case H3.
	search. search. search.
	assert (member (tyvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4.
		case H5. search. search. search.
	assert (member (styvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4.
		case H5. search. search. search.
	unfold. apply IH to _ _ H4. search. apply IH to _ _ H5. search.
	unfold. intros.
		apply IH to _ _ H4 with E = (tyvar n1 :: E), F = F, EFG = (tyvar n1 :: EFG). /* GEN_BY_SCRIPT 
		applys IH with E = (tyvar n1 :: E), F = F, EFG = (tyvar n1 :: EFG). */ 
			backchain split3_cons.
		search.

Theorem wft_prune : forall E T, nabla (x : ty),
	wft E (T x) -> exists Fr, T = x\Fr.
induction on 1. intros. case H1.
	search. search. search.
	case H2. search.
	case H3. search. search.
	apply member_prune to H2.
	search.
	apply member_prune to H2. /* GEN_BY_SCRIPT 
	applys member_prune H2. */ 
	apply IH to H2. apply IH to H3. search.
	apply IH to H2. search.
Theorem wft_weaken_f : forall E F EF T,
	append E F EF -> wft F T -> wft EF T.
intros. backchain wft_weaken with E = nil, F = E, G = F.

Theorem wft_weaken_a : forall E F G T EG EFG,
	append E G EG -> split3 E F G EFG ->
	wft EG T -> wft EFG T.
induction on 3. intros. case H3.
	search. search. search.
	assert (member (tyvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4.
		case H5. search. search. search.
	assert (member (styvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4.
		case H5. search. search. search.
	unfold. apply IH to _ _ H4. search. apply IH to _ _ H5. search.
	unfold. intros.
		apply IH to _ _ H4 with E = (tyvar n1 :: E), F = F, EFG = (tyvar n1 :: EFG). /* GEN_BY_SCRIPT 
		applys IH with E = (tyvar n1 :: E), F = F, EFG = (tyvar n1 :: EFG). */ 
			backchain split3_cons.
		search.

Theorem wft_weaken_af : forall E F EF T,
	append E F EF -> wft F T -> wft EF T.
intros. backchain wft_weaken_a with E = nil, F = E, G = F.
Theorem wft_weaken_j : forall E T J,
	wft E T -> wft (j J :: E) T.
intros. backchain wft_weaken_af with E = j J :: nil.
Theorem wft_weaken_ty : forall E A, nabla x,
	wft E A -> wft (tyvar x :: E) A.
intros. backchain wft_weaken_f with E = tyvar n1 :: nil.
Theorem wft_weaken_sty : forall E A, nabla x,
	wft E A -> wft (styvar x :: E) A.
intros. backchain wft_weaken_f with E = styvar n1 :: nil.
Theorem wft_weaken_of : forall E A T, nabla x,
	wft E A -> wft (of x T :: E) A.
intros. backchain wft_weaken_f with E = of n1 T :: nil.

Theorem env_add_last : forall E F, nabla x,
	append E (tyvar x :: nil) (F x) -> env E -> env (F x).
induction on 1. intros. case H1. search.
	case H2. apply append_prune_AB to H3. unfold. backchain IH.
	apply append_prune_AB_tm to H3. apply IH to H3 _. unfold. search.
		backchain wft_weaken with E = E3, F = tyvar n1 :: nil, G = nil.
			apply append_nil_E to H3. search.
			backchain split3_alt.

Theorem mono_weaken : forall E F G T EG EFG,
	append E G EG -> split3 E F G EFG ->
	mono EG T -> mono EFG T.
induction on 3. intros. case H3.
	search.
	assert (member (tyvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4.
		case H5. search. search. search.
	apply IH to _ _ H4. apply IH to _ _ H5. search.

Theorem mono_prune : forall E T, nabla (x : ty),
	mono E (T x) -> exists m, T = x\m.
induction on 1. intros. case H1.
	search.
	case H2. search.
	case H3. search. search.
	apply member_prune to H2.
	apply IH to H2. apply IH to H3. search.

Theorem mono_weaken_f : forall E F EF T,
	append E F EF -> mono F T -> mono EF T.
intros. backchain mono_weaken with E = nil, F = E, G = F.
Theorem mono_weaken_ex : forall E A, nabla x,
	mono E A -> mono (exvar x :: E) A.
intros. backchain mono_weaken_f with E = exvar n1 :: nil.
Theorem mono_weaken_ty : forall E A, nabla x,
	mono E A -> mono (tyvar x :: E) A.
intros. backchain mono_weaken_f with E = tyvar n1 :: nil.
Theorem mono_weaken_sty : forall E A, nabla x,
	mono E A -> mono (styvar x :: E) A.
intros. backchain mono_weaken_f with E = styvar n1 :: nil.
Theorem mono_weaken_of : forall E A T, nabla x,
	mono E A -> mono (of x T :: E) A.
intros. backchain mono_weaken_f with E = of n1 T :: nil.

Theorem mono_prune_tm : forall E T, nabla (x : tm),
	mono (E x) (T x) -> exists m, T = x\m.
induction on 1. intros. case H1.
	search.
	case H2. search.
	case H3. search. search.
	apply IH to H2. apply IH to H3. search.

Theorem sub_weaken : forall E F G T1 T2 EG EFG,
	append E G EG -> split3 E F G EFG ->
	sub EG T1 T2 -> sub EFG T1 T2.
induction on 3. intros. case H3.
	search.
	W: apply wft_weaken to _ _ _. /* GEN_BY_SCRIPT 
	W: applys wft_weaken. */  search.
	W: apply wft_weaken to _ _ _. /* GEN_BY_SCRIPT 
	W: applys wft_weaken. */  search.
	assert (member (tyvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4. case H5. search. search.
		search.
	assert (member (styvar n1) (EFG n1)). backchain split3_mem.
		apply append_mem_inv to _ H4. case H5. search. search.
		search.
	apply IH to _ _ H4. /* GEN_BY_SCRIPT 
	applys IH H4. */  apply IH to _ _ H5. /* GEN_BY_SCRIPT  applys IH H5. */  search.
	apply IH to _ _ H4. /* GEN_BY_SCRIPT 
	applys IH. */ 
		M: apply mono_weaken to _ _ H5. /* GEN_BY_SCRIPT 
		M: applys mono_weaken H5. */ 
		search.
	apply IH to _ _ H4 with E = (styvar n1 :: E), F = F, EFG = (styvar n1 :: EFG). /* GEN_BY_SCRIPT 
	applys IH with E = (styvar n1 :: E), F = F, EFG = (styvar n1 :: EFG). */ 
		backchain split3_cons. search.

Theorem sub_weaken_f : forall E F EF T1 T2,
	append E F EF -> sub F T1 T2 -> sub EF T1 T2.
intros. backchain sub_weaken with E = nil, F = E, G = F.
Theorem sub_weaken_ex : forall E A B, nabla x,
	sub E A B -> sub (exvar x :: E) A B.
intros. backchain sub_weaken_f with E = exvar n1 :: nil.
Theorem sub_weaken_ty : forall E A B, nabla x,
	sub E A B -> sub (tyvar x :: E) A B.
intros. backchain sub_weaken_f with E = tyvar n1 :: nil.
Theorem sub_weaken_sty : forall E A B, nabla x,
	sub E A B -> sub (styvar x :: E) A B.
intros. backchain sub_weaken_f with E = styvar n1 :: nil.
Theorem sub_weaken_of : forall E A B X, nabla x,
	sub E A B -> sub (of x X :: E) A B.
intros. backchain sub_weaken_f with E = of n1 X :: nil.

% Substitution

Theorem eq_refl[T] : forall (A B : T), A = B -> B = A.
search.

Theorem inFV_det_wft : forall E A, nabla (x : ty),
	wft (E x) (A x) -> inFV A \/ (exists Ar, A = x\ Ar).
induction on 1. intros W.
	W: case W. % Manual Fix
		search. search. search. search. search. search. search.
	apply IH to W. /* GEN_BY_SCRIPT 
	applys IH W. */  apply IH to W1. /* GEN_BY_SCRIPT  applys IH W1. */ 
		case H1.
			left. case H3. unfold. intros. case H5. backchain H4.
			case H2.
				left. case H3. unfold. intros. case H5. backchain H4.
				search.
	apply IH to W. /* GEN_BY_SCRIPT 
	applys IH. */  case H1. % Manual Fix
		left. case H2. unfold. intros. case H4. backchain H3.
		search.

Theorem inFV_false : forall A, inFV x\ A -> false.
intros. case H1. apply H2 to _. /* GEN_BY_SCRIPT  applys H2. */ 

Theorem inFV_subst : forall E A m (X : ty), nabla (y : ty),
	wft (E y) (A X y) -> inFV (A X) -> inFV (A m).
induction on 1. intros W FV. % Manual fix
W: case W.
	case W. search. apply inFV_false to FV.
	case W. search. apply inFV_false to FV.
	case W. search. apply inFV_false to FV.
	case W. search. apply inFV_false to FV.
	case W. search.
	case W. search. apply inFV_false to FV.
	case W. search.
	% ->
	case W.
		FV: case FV.
			FVA: apply inFV_det_wft to W1. /* GEN_BY_SCRIPT 
			FVA: applys inFV_det_wft W1. */  FVB: apply inFV_det_wft to W2. /* GEN_BY_SCRIPT  FVB: applys inFV_det_wft W2. */ 
			FVA: case FVA.
				apply IH to W1 _ with A = A2, m = m. /* GEN_BY_SCRIPT 
				applys IH W1 with A = A2, m = m. */ 
					case H1. unfold. intros. case H3. case H4.
					apply eq_refl to H6. backchain H2.
				FVB: case FVB.
					apply IH to W2 _ with A = A3, m = m. /* GEN_BY_SCRIPT 
					applys IH W2 with A = A3, m = m. */ 
						case H1. unfold. intros. case H3. case H4.
						apply eq_refl to H5. backchain H2.
				Aux: assert forall (A B : ty -> ty) Ar Br,
					z\ A z = z\ Ar -> z\ B z = z\ Br -> z\ arrow (A z) (B z) = z\ arrow Ar Br.
				apply FV to _. /* GEN_BY_SCRIPT 
				applys FV. */  exists arrow Ar Ar1. backchain Aux.
		apply inFV_false to FV.
	% forall
	case W.
		apply IH to W1 _ with A = x\ y\ A2 x y n2, m = m. /* GEN_BY_SCRIPT 
		applys IH W1 with A = x\ y\ A2 x y n2, m = m. */ 
			unfold. FV: case FV. intros. case H1.
				Aux: assert forall (A : ty -> ty -> ty) Ar,
						nabla x, z\ A z x = z\ Ar x -> z\ all (A z) = z\ all Ar.
				backchain FV. exists all Ar. backchain Aux.
			unfold. case H1. intros. backchain 0 H2. case H3. case H4. apply eq_refl to H5.
			Aux: assert forall (A : ty -> ty -> ty) B, nabla x,
					z\A z = z\ B -> z\A z x = z\ B x.
			apply Aux to H6. exists Ar1 n2. permute (n1 n2) H7.
			Aux: assert forall (A : ty -> ty) B, nabla x, z\ A z = z\ B -> A x = B.
			apply Aux1 to H7 with A = x\ A2 m x n2, B = Ar1 n2.
			Aux: assert forall (A : ty -> ty) B, nabla x, A x = B -> z\ A z = z\ B.
			backchain Aux2 with x = n1.
		apply inFV_false to FV.

Theorem wft_subst : forall E T X m,
	wft E (T X) -> wft E m -> wft E (T m).
induction on 1. intros. case H1. % Manual Fix
	case H3. search. search.
	case H3. search. search.
	case H3. search. search.
	case H3. search. search.
	case H3. search. search.
	case H3. apply IH to H4 H2 with T = T1. apply IH to H5 H2 with T = T2.
		search. search.
	case H3. unfold. assert exists T, T1 = x\y\ T y x. case H6.
		apply IH to H4 _ with X = X, m = m, T = T2 n1.
		backchain wft_weaken_f with E = tyvar n1 :: nil.
		apply inFV_subst to _ H5 with A = x\ y\ T2 y x, m = m. /* GEN_BY_SCRIPT 
		applys inFV_subst H5 with A = x\ y\ T2 y x, m = m. */ 
		search. search.

Theorem wft_unsubst_all : forall E A m,
	wft E (A m) -> inFV A -> wft E (all A).
intros W FV.
	W: apply wft_weaken_f to _ _ with E = tyvar n1 :: nil. /* GEN_BY_SCRIPT 
	W: applys wft_weaken_f with E = tyvar n1 :: nil. */ 
	W: apply wft_subst to W1 _ with T = A, m = n1. /* GEN_BY_SCRIPT 
	W: applys wft_subst W1 with T = A, m = n1. */ 
	search.

Theorem mono_subst : forall E T X, nabla (x : ty),
	mono (E x) (T x) -> mono (E x) X -> mono (E x) (T X).
induction on 1. intros. case H1.
	search.
	search. search. unfold. backchain IH with T = A. backchain IH with T = B.

Theorem mem_FxE_FE : forall F E FxE (X:o) FE Y,
	append F (X :: E) FxE -> append F E FE -> member Y FxE ->
	(X = Y -> false) -> member Y FE.
induction on 1. intros. case H1.
	case H3. apply H4 to _. /* GEN_BY_SCRIPT  applys H4. */  case H2. search.
	case H3. case H2. search.
		case H2. apply IH to H5 _ _ _. /* GEN_BY_SCRIPT  applys IH H5. */  search.

Theorem mem_FE_FxE : forall F E FxE (X:o) FE Y,
	append F (X :: E) FxE -> append F E FE -> member Y FE ->
	(X = Y -> false) -> member Y FxE.
induction on 1. intros. case H1.
	case H2. search.
	case H2. case H3. search.
		apply IH to H5 _ _ _. /* GEN_BY_SCRIPT 
		applys IH. */  search.

Theorem mem_FxE_FyE : forall F E FxE (X:o) FyE Y M,
	append F (X :: E) FxE -> append F (Y :: E) FyE -> member M FxE ->
	(X = M -> false) -> (Y = M -> false) -> member M FyE.
induction on 1. intros. case H1.
	case H3. apply H4 to _. /* GEN_BY_SCRIPT  applys H4. */  case H2. search.
	case H3. case H2. search.
		case H2. apply IH to H6 H8 _ _ _. /* GEN_BY_SCRIPT  applys IH H8. */  search.

Theorem mem_GE_GFE : forall G F E GFE GE (X:o),
	split3 G F E GFE -> append G E GE -> member X GE -> member X GFE.
induction on 1. intros. case H1.
	M: apply append_mem_inv to _ H3. /* GEN_BY_SCRIPT 
	M: applys append_mem_inv H3. */  M: case M.
		apply append_mem to H4 _. /* GEN_BY_SCRIPT 
		applys append_mem H4. */  backchain append_mem.
		backchain append_mem.

Theorem mem_GFE_GE : forall G F E GFE GE (X:o),
	split3 G F E GFE -> append G E GE -> member X GFE ->
	(member X F -> false) -> member X GE.
induction on 1. intros. case H1.
	M: apply append_mem_inv to _ H3. /* GEN_BY_SCRIPT 
	M: applys append_mem_inv H3. */  M: case M.
		M: apply append_mem_inv to H5 _. /* GEN_BY_SCRIPT 
		M: applys append_mem_inv H5. */  M: case M1.
			backchain append_mem.
			apply H4 to _. /* GEN_BY_SCRIPT 
			applys H4. */ 
		backchain append_mem.


Theorem wft_sty_ty : forall F E FtyE FstyE A, nabla x,
	append (F x) (tyvar x :: E) (FtyE x) -> append (F x) (styvar x :: E) (FstyE x) ->
	wft (FstyE x) (A x) -> wft (FtyE x) (A x).
induction on 3. intros A A W. W: case W (keep). % Manual Fix
	search. search. search.
	apply mem_FxE_FyE to A1 A W1 _ _. /* GEN_BY_SCRIPT 
	applys mem_FxE_FyE W1 A1 A. */  search.
	apply append_mem to A _. /* GEN_BY_SCRIPT 
	applys append_mem A. */  search.
	apply mem_FxE_FyE to A1 A W1 _ _. /* GEN_BY_SCRIPT 
	applys mem_FxE_FyE W1 A1 A. */  search.
	apply append_mem to A _. /* GEN_BY_SCRIPT 
	applys append_mem A. */  search.
	apply IH to _ _ W1. /* GEN_BY_SCRIPT 
	applys IH W1. */  apply IH to _ _ W2. /* GEN_BY_SCRIPT  applys IH W2. */  search.
	W: apply IH to _ _ W1. /* GEN_BY_SCRIPT 
	W: applys IH W1. */  search.

Theorem wft_all_sty : forall E A, nabla x,
	wft (styvar x :: E) (A x) -> inFV A -> wft E (all A).
intros W. apply wft_sty_ty to _ _ _. /* GEN_BY_SCRIPT  applys wft_sty_ty. */  search.

Theorem sub_wft : forall E A B,
	sub E A B -> wft E A /\ wft E B.
induction on 1. intros. case H1. % Manual Fix
	search. search. search. search. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */  apply IH to H3. /* GEN_BY_SCRIPT  applys IH H3. */  search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  assert wft (tyvar n1 :: E) (A1 m).
		backchain wft_weaken_f with E = tyvar n1 :: nil.
		apply wft_subst to H8 _ with T = A1, m = n1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  apply wft_all_sty to H5 _. /* GEN_BY_SCRIPT  applys wft_all_sty H5. */  apply wft_all_sty to H6 _. /* GEN_BY_SCRIPT  applys wft_all_sty H6. */  search.


% Theorem subEnv_det : forall E E1 E2, subEnv E E1 -> subEnv E E2 -> E1 = E2.
% induction on 1. intros. case H1; try case H2; try applys IH H4; try search.

Theorem sub_subst : forall E A B, nabla (x : ty),
	sub (E x) (A x) (B x) -> sub (E x) (A i) (B i).
induction on 1. intros. case H1 (keep).
	search.
	apply wft_subst to H2 _ with T = A, m = i. /* GEN_BY_SCRIPT 
	applys wft_subst H2 with T = A, m = i. */  search.
	apply wft_subst to H2 _ with T = B, m = i. /* GEN_BY_SCRIPT 
	applys wft_subst H2 with T = B, m = i. */  search.
	search. search. search. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */  apply IH to H3. /* GEN_BY_SCRIPT  applys IH H3. */  search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */ 
		unfold. exists m i.
		split. search. backchain mono_subst with T = m, x = n1.
		W: apply sub_wft to H2. /* GEN_BY_SCRIPT 
		W: applys sub_wft H2. */  
		case W1. % Manual Fix
			search. search. search. search. search. search. search. search. apply notAll_false to H4.
		W: apply sub_wft to H1. /* GEN_BY_SCRIPT 
		W: applys sub_wft H1. */  W: case W.
			apply inFV_subst to _ H5 with A = A1, m = i. /* GEN_BY_SCRIPT 
			applys inFV_subst H5 with A = A1, m = i. */  search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */ 
		W: apply sub_wft to H2. /* GEN_BY_SCRIPT 
		W: applys sub_wft H2. */ 
		unfold (all). right. intros. split. search.
		apply inFV_subst to _ H3 with A = A1, m = i. /* GEN_BY_SCRIPT 
		applys inFV_subst H3 with A = A1, m = i. */  search.
		apply inFV_subst to _ H4 with A = B1, m = i. /* GEN_BY_SCRIPT 
		applys inFV_subst H4 with A = B1, m = i. */  search.

Define wft_sty : olist -> ty -> prop by
	wft_sty E i;
	wft_sty E top;
	wft_sty E bot;
	nabla x, wft_sty (E x) x := nabla x, member (tyvar x) (E x);
	nabla x, wft_sty (E x) x := nabla x, member (styvar x) (E x);
	wft_sty E (arrow A B) := wft_sty E A /\ wft_sty E B;
	wft_sty E (all A) := nabla x,
		wft_sty (styvar x :: E) (A x) /\ wft_sty (tyvar x :: E) (A x) /\ inFV A.

Theorem wft_sty_sound : forall E A, wft_sty E A -> wft E A.
induction on 1. intros. case H1. % Manual Fix
	search. search. search. search. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */  apply IH to H3. /* GEN_BY_SCRIPT  applys IH H3. */  search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH H3. */  search.

Theorem wft_sty_ty_sty : forall F E FtyE FstyE A, nabla x,
	append (F x) (tyvar x :: E) (FtyE x) -> append (F x) (styvar x :: E) (FstyE x) ->
	wft_sty (FtyE x) (A x) -> wft_sty (FstyE x) (A x).
induction on 3. intros A A W. W: case W (keep).
	search. search. search.
	apply mem_FxE_FyE to A A1 W1 _ _. /* GEN_BY_SCRIPT 
	applys mem_FxE_FyE W1 A A1. */  search.
	apply append_mem to A1 _. /* GEN_BY_SCRIPT 
	applys append_mem A1. */  search.
	apply mem_FxE_FyE to A A1 W1 _ _. /* GEN_BY_SCRIPT 
	applys mem_FxE_FyE W1 A A1. */  search.
	apply append_mem to A1 _. /* GEN_BY_SCRIPT 
	applys append_mem A1. */  search.
	apply IH to _ _ W1. /* GEN_BY_SCRIPT 
	applys IH W1. */  apply IH to _ _ W2. /* GEN_BY_SCRIPT  applys IH W2. */  search.
	A: assert append (styvar n2 :: F n1) (tyvar n1 :: E) (styvar n2 :: FtyE n1).
		A: assert append (tyvar n2 :: F n1) (tyvar n1 :: E) (tyvar n2 :: FtyE n1).
		W: apply IH to A2 _ W1. /* GEN_BY_SCRIPT 
		W: applys IH W1 A2. */ 
		W: apply IH to A3 _ W2. /* GEN_BY_SCRIPT 
		W: applys IH W2 A3. */ 
		search.

Theorem wft_sty_ty_sty_x : forall E A, nabla x,
	wft_sty (tyvar x :: E) (A x) -> inFV A -> wft_sty (styvar x :: E) (A x).
intros W. apply wft_sty_ty_sty to _ _ _. /* GEN_BY_SCRIPT  applys wft_sty_ty_sty. */  search.

Theorem wft_sty_complete : forall E A, wft E A -> wft_sty E A.
induction on 1. intros. case H1.
	search. search. search. search. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */  apply IH to H3. /* GEN_BY_SCRIPT  applys IH H3. */  search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  apply wft_sty_ty_sty_x to H4 _. /* GEN_BY_SCRIPT  applys wft_sty_ty_sty_x H4. */ 
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem wft_ty_sty : forall F E FtyE FstyE A, nabla x,
	append (F x) (tyvar x :: E) (FtyE x) -> append (F x) (styvar x :: E) (FstyE x) ->
	wft (FtyE x) (A x) -> wft (FstyE x) (A x).
intros. apply wft_sty_complete to H3. /* GEN_BY_SCRIPT  applys wft_sty_complete H3. */ 
	apply wft_sty_ty_sty to _ _ _. /* GEN_BY_SCRIPT 
	applys wft_sty_ty_sty. */ 
	backchain wft_sty_sound.

Theorem wft_ty_sty_x : forall E A, nabla x,
	wft (tyvar x :: E) (A x) -> inFV A -> wft (styvar x :: E) (A x).
intros. apply wft_sty_complete to H1. /* GEN_BY_SCRIPT  applys wft_sty_complete H1. */ 
	apply wft_sty_ty_sty to _ _ _. /* GEN_BY_SCRIPT 
	applys wft_sty_ty_sty. */ 
	backchain wft_sty_sound.

Theorem sub_refl_sty : forall E A, wft_sty E A -> sub E A A.
induction on 1. intros. case H1 (keep). % Manual Fix
	search. search. search. search. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */  apply IH to H3. /* GEN_BY_SCRIPT  applys IH H3. */  search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH H2. */  search.

Theorem sub_refl : forall E A, wft E A -> sub E A A.
intros. apply wft_sty_complete to _. /* GEN_BY_SCRIPT  applys wft_sty_complete. */  backchain sub_refl_sty.

% no longer holds in presents of top/bot
Theorem sub_mono : forall E A B,
	mono E A -> mono E B -> sub E A B \/ sub E B A -> A = B.
induction on 1. intros. case H1.
	case H2. search. % Manual Fixes
		case H3. case H5. case H5.
		case H3. case H6. case H6.
	case H2.
		case H3. case H5. case H5.
		case H3. case H6. case H6.
		search.
		case H3. case H7. case H7.
	case H3.
		case H6. case H2. case H2. apply IH to H4 _ _. /* GEN_BY_SCRIPT  applys IH H4. */  apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH H5. */  search.
		case H6. case H2. case H2. apply IH to H4 _ _. /* GEN_BY_SCRIPT  applys IH H4. */  apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH H5. */  search.
		case H2.
