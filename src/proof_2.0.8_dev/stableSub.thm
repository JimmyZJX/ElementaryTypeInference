Import "nonOverlap".

Define sub_stable : olist -> ty -> ty -> prop by
	sub_stable E A A := wft E A;
	sub_stable E A top := wft E A;
	sub_stable E bot A := wft E A;
	sub_stable E (arrow A1 A2) (arrow B1 B2) := sub_stable E B1 A1 /\ sub_stable E A2 B2;
	sub_stable E (all A) B := exists m, sub_stable E (A m) B /\ mono E m /\ notAll_ B /\ inFV A;
	sub_stable E (all A) (all B) := (forall C, wft E C -> sub_stable E (A C) (B C)).



% (L, E, A) => A'
Define inst_list : olist -> olist -> ty -> ty -> prop by
	inst_list nil E A A;
	nabla x, inst_list (tyvar x :: L) E (A x) B := exists m, mono E m /\ inst_list L E (A m) B.

Define tyvar_list : olist -> olist -> prop by
	tyvar_list nil E;
	nabla x, tyvar_list (tyvar x :: L) E := tyvar_list L E.


Theorem inst_list_i_det : forall L E Ai, inst_list L E i Ai -> Ai = i.
induction on 1. intros. case H1. search. apply IH to H3. /* GEN_BY_SCRIPT  applys IH. */  search.
Theorem inst_list_top_det : forall L E Ai, inst_list L E top Ai -> Ai = top.
induction on 1. intros. case H1. search. apply IH to H3. /* GEN_BY_SCRIPT  applys IH. */  search.
Theorem inst_list_bot_det : forall L E Ai, inst_list L E bot Ai -> Ai = bot.
induction on 1. intros. case H1. search. apply IH to H3. /* GEN_BY_SCRIPT  applys IH. */  search.
Theorem inst_list_bot : forall L E, tyvar_list L E -> inst_list L E bot bot.
induction on 1. intros. case H1. search. apply IH to H2 with E = E. /* GEN_BY_SCRIPT  applys IH with E = E. */  search.
Theorem inst_list_ty_det : forall L E Ai, nabla a, inst_list L (E a) a (Ai a) -> Ai = z\ z.
induction on 1. intros. case H1. search. apply IH to H3. /* GEN_BY_SCRIPT  applys IH. */  search.
Theorem inst_list_ty_E : forall L E, nabla a,
	tyvar_list L (E a) -> inst_list L (E a) a a.
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.
Theorem inst_list_sty_det : forall L E LE Ai, nabla a,
	inst_list (L a) (E a) a (Ai a) ->
	append (L a) (E a) (LE a) -> member (styvar a) (LE a) ->
	Ai = z\ z /\ member (styvar a) (E a) /\ exists Lr, L = x\ Lr.
induction on 1. intros. case H1 (keep).
	case H2. search.
	A: case H2. M: case H3. apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.
	A: case H2. M: case H3. apply append_prune_AB to A. /* GEN_BY_SCRIPT  applys append_prune_AB A. */ 
		apply member_prune to M. /* GEN_BY_SCRIPT 
		applys member_prune M. */ 

Theorem inst_list_mono : forall L E m,
	tyvar_list L E -> mono E m -> inst_list L E m m.
induction on 1. intros. case H1. search.
	apply mono_prune to H2. /* GEN_BY_SCRIPT 
	applys mono_prune H2. */  apply IH to H3 _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem inst_list_ty_L_mono : forall L E m, nabla a,
	tyvar_list (L a) E -> member (tyvar a) (L a) -> mono E m -> inst_list (L a) E a m.
induction on 1. intros. case H1.
	case H2.
	case H2. apply mono_prune to H3. /* GEN_BY_SCRIPT  applys mono_prune H3. */  apply IH to H4 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.
	apply inst_list_mono to _ _. /* GEN_BY_SCRIPT 
	applys inst_list_mono. */  search.


Theorem inst_list_ty_inst_wft : forall L E C A Ai, nabla a,
	inst_list L E (A a) (Ai a) -> wft E C -> inst_list L E (A C) (Ai C).
induction on 1. intros I M. I: case I. search.
	apply wft_prune to M. /* GEN_BY_SCRIPT 
	applys wft_prune M. */  apply mono_prune to I. /* GEN_BY_SCRIPT  applys mono_prune I. */ 
		I: apply IH to I1 _. /* GEN_BY_SCRIPT 
		I: applys IH. */  search.

Theorem inst_list_ty_inst_mono : forall L E m A Ai, nabla a,
	inst_list L E (A a) (Ai a) -> mono E m -> inst_list L E (A m) (Ai m).
induction on 1. intros I M. I: case I. search.
	apply mono_prune to M. /* GEN_BY_SCRIPT 
	applys mono_prune M. */  apply mono_prune to I. /* GEN_BY_SCRIPT  applys mono_prune I. */ 
		I: apply IH to I1 _. /* GEN_BY_SCRIPT 
		I: applys IH. */  search.

Theorem inst_list_ty_inst : forall L E m A Ai, nabla a,
	inst_list L E (A a) (Ai a) -> mono E m -> inst_list (tyvar a :: L) E (A a) (Ai m).
intros IL M. apply inst_list_ty_inst_mono to _ _. /* GEN_BY_SCRIPT  applys inst_list_ty_inst_mono. */  search.

Theorem inst_list_arrow_split : forall L E A B ABi,
	inst_list L E (arrow A B) ABi ->
	exists Ai Bi, ABi = arrow Ai Bi /\
		inst_list L E A Ai /\ inst_list L E B Bi.
induction on 1. intros. case H1. search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem inst_list_arrow_inv : forall L E A Ai Bi,
	inst_list L E A (arrow Ai Bi) ->
	(name A /\ member (tyvar A) L) \/ exists A1 A2, A = arrow A1 A2 /\
		inst_list L E A1 Ai /\ inst_list L E A2 Bi.
induction on 1. intros. case H1. search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH. */  case H4.
		case H5. case H7. search. search.
		case H5. search. search.


Theorem inst_list_all_match : forall L E A Ai,
	inst_list L E (all A) Ai ->
	exists ai, nabla a, Ai = all ai /\ inst_list L E (A a) (ai a).
induction on 1. intros. case H1. search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem inst_list_sty_inv : forall L E A, nabla a,
	inst_list L (E a) (A a) a -> wfj (E a) -> member (styvar a) (E a) -> A = a\ a.
induction on 1. intros. case H1. search.
	apply mono_prune_styvar to _ _ _. /* GEN_BY_SCRIPT 
	applys mono_prune_styvar. */  apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  case H6. search.

Theorem inst_list_var_inv : forall L E A, nabla a,
	inst_list L E (A a) a -> wfj E -> A = a\ a.
induction on 1. intros. case H1. search.
	apply mono_prune to H3. /* GEN_BY_SCRIPT 
	applys mono_prune H3. */  apply IH to H4 _. /* GEN_BY_SCRIPT  applys IH. */  case H5. search.

Theorem inst_list_all_match_inv : forall L E A Ai,
	inst_list L E A (all Ai) ->
	exists a, nabla x, A = all a /\ inst_list L E (a x) (Ai x).
induction on 1. intros. case H1. search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH. */  case H4. search. case H2.


Theorem wft_open : forall E A B, nabla x,
	wfj E -> wft (tyvar x :: E) (A x) -> wft E B -> wft E (A B).
intros.
	W: apply wft_weaken_f to _ H3 with E = tyvar n1 :: nil. /* GEN_BY_SCRIPT 
	W: applys wft_weaken_f H3 with E = tyvar n1 :: nil. */ 
	W: apply wft_subst to H2 W with T = A. /* GEN_BY_SCRIPT 
	W: applys wft_subst H2 W with T = A. */ 
	W: apply wft_strenthen_tyvar_fresh to _ _ W1 _ with F = x\ nil, E = E. /* GEN_BY_SCRIPT 
	W: applys wft_strenthen_tyvar_fresh W1 with F = x\ nil, E = E. */ 
	search.

Theorem inst_list_wfj : forall L E LE A Ai, inst_list L E A Ai -> wfj E -> append L E LE -> wfj LE.
induction on 1. intros. case H1.
	case H3. search.
	case H3. apply append_prune_AB to H6. /* GEN_BY_SCRIPT  applys append_prune_AB H6. */  apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem inst_list_wft : forall L E LE A Ai,
	inst_list L E A Ai -> append L E LE -> wfj E -> wft LE A -> wft E Ai.
induction on 1. intros. case H1.
	case H2. search.
	case H2. apply append_prune_AB to H7. /* GEN_BY_SCRIPT  applys append_prune_AB H7. */ 
		W: apply mono_wft to H5. /* GEN_BY_SCRIPT 
		W: applys mono_wft H5. */ 
		W: apply wft_weaken_f to _ W. /* GEN_BY_SCRIPT 
		W: applys wft_weaken_f W. */ 
		W: apply wft_open to _ _ W1 with A = A. /* GEN_BY_SCRIPT 
		W: applys wft_open _ W1 with A = A. */ 
			backchain inst_list_wfj.
		apply IH to H6 _ _ _. /* GEN_BY_SCRIPT 
		applys IH. */  search.

Theorem inst_list_wft_f : forall L F E FE LFE A Ai,
	inst_list L E A Ai -> tyvar_list L FE -> wfj LFE ->
	append F E FE -> append L FE LFE -> wfj E -> wft LFE A -> wft FE Ai.
induction on 1. intros. case H1.
	case H5. search.
	case H5. case H2. case H3.
		apply append_prune_AB to H10. /* GEN_BY_SCRIPT 
		applys append_prune_AB H10. */  apply append_prune to H4. /* GEN_BY_SCRIPT  applys append_prune H4. */ 
		apply IH to H9 _ _ _ _ _ _. /* GEN_BY_SCRIPT 
		applys IH. */ 
			W: apply mono_wft to H8. /* GEN_BY_SCRIPT 
			W: applys mono_wft H8. */ 
			W: apply wft_weaken_f to _ W. /* GEN_BY_SCRIPT 
			W: applys wft_weaken_f W. */  W: apply wft_weaken_f to _ W1. /* GEN_BY_SCRIPT  W: applys wft_weaken_f W1. */ 
			W: apply wft_open to _ _ W2 with A = A. /* GEN_BY_SCRIPT 
			W: applys wft_open _ W2 with A = A. */  search.
		search.


Theorem inst_list_prune_Ai : forall L E A Ai, nabla (a : ty),
	inst_list L E A (Ai a) -> exists Ar, Ai = a\ Ar.
induction on 1. intros. case H1. search.
	apply mono_prune to _. /* GEN_BY_SCRIPT 
	applys mono_prune. */  apply IH to H3. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem tyvar_list_prune_E_ty : forall L E, nabla a,
	tyvar_list (L a) (E a) -> member (tyvar a) (L a) -> exists Er, E = a\ Er.
induction on 1. intros. case H1. % Manual Fix case H2.
case H2. case H2.
	apply IH to H3 _. /* GEN_BY_SCRIPT 
	applys IH. */  search.
	case H2.
	search. apply member_prune to H4. /* GEN_BY_SCRIPT  applys member_prune H4. */ 

Theorem tyvar_list_prune_L_ty : forall L E, nabla a,
	tyvar_list (L a) (E a) -> member (tyvar a) (E a) -> exists Lr, L = a\ Lr.
induction on 1. intros. case H1.
	search.
	apply IH to H3 _. /* GEN_BY_SCRIPT 
	applys IH. */  search.
	apply member_prune to H2. /* GEN_BY_SCRIPT 
	applys member_prune H2. */ 

Theorem tyvar_list_prune_L_sty : forall L E, nabla a,
	tyvar_list (L a) (E a) -> member (styvar a) (E a) -> exists Lr, L = a\ Lr.
induction on 1. intros. case H1.
	search.
	apply IH to H3 _. /* GEN_BY_SCRIPT 
	applys IH. */  search.
	apply member_prune to H2. /* GEN_BY_SCRIPT 
	applys member_prune H2. */ 


Theorem tyvar_list_wfj : forall L E LE, tyvar_list L E -> wfj E -> append L E LE -> wfj LE.
induction on 1. intros. case H1.
	case H3. search.
	case H3. apply append_prune_AB to H5. /* GEN_BY_SCRIPT  applys append_prune_AB H5. */  apply IH to H4 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem inst_list_mono_det : forall L E m m1,
	inst_list L E m m1 -> mono E m -> m = m1.
induction on 1. intros. case H1. search.
	apply mono_prune to H2. /* GEN_BY_SCRIPT 
	applys mono_prune H2. */  apply IH to H4 _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem inst_list_a_inL_isMono : forall L E m, nabla a,
	member (tyvar a) (L a) -> inst_list (L a) E a (m a) -> exists mr, m = a\ mr /\ mono E mr.
induction on 2. intros. case H2.
	case H1.
	case H1. apply IH to _ H4. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H1. apply inst_list_mono_det to _ _. /* GEN_BY_SCRIPT  applys inst_list_mono_det. */  search. apply member_prune to H5. /* GEN_BY_SCRIPT  applys member_prune H5. */ 


Kind dir type.
Type pos, neg dir.

Define sub_dir : dir -> olist -> ty -> ty -> prop by
	sub_dir pos E A B := sub E A B;
	sub_dir neg E A B := sub E B A.

Define is_dir : dir -> prop by
	is_dir pos; is_dir neg.



Theorem sub_inst_top : forall E A m,
	sub E top (A m) -> mono E m -> exists Ar, A = x\ Ar.
induction on 1. intros S M. W: apply sub_wft to S. /* GEN_BY_SCRIPT  W: applys sub_wft S. */  S: case S.
	case S. search. case M.


Define styvar_list : olist -> olist -> prop by
	styvar_list nil E;
	nabla x, styvar_list (styvar x :: L) E := styvar_list L E.

Theorem styvar_list_wfj : forall SL E SLE,
	styvar_list SL E -> append SL E SLE -> wfj E -> wfj SLE.
induction on 1. intros. case H1. case H2. search.
	case H2. apply append_prune_AB to H5. /* GEN_BY_SCRIPT  applys append_prune_AB H5. */  apply IH to H4 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem styvar_list_ty_false : forall SL E X,
	styvar_list SL E -> member (tyvar X) SL -> false.
induction on 1. intros. case H1. case H2.
	case H2. apply IH to H3 _ with X = X n1. /* GEN_BY_SCRIPT  applys IH with X = X n1. */ 


Kind instantiation type.
Type inst   ty -> ty -> instantiation.

% SL, E, tys
Define sty_inst_list : olist -> olist -> list instantiation -> prop by
	sty_inst_list nil E nil;
	nabla x, sty_inst_list (styvar x :: SL) E (inst x A :: Tys) := wft E A /\ sty_inst_list SL E Tys.

Define subst_list : list instantiation -> ty -> ty -> prop by
	subst_list nil A A;
	nabla x, subst_list (inst x T :: Tys) (A x) As := subst_list Tys (A T) As.

Define subst_list_i : olist -> olist -> ty -> ty -> prop by
	subst_list_i nil E A A;
	nabla x, subst_list_i (styvar x :: L) E (A x) Asi := subst_list_i L E (A i) Asi.


Theorem subst_list_is_styvar_list : forall SL E Tys A As,
	sty_inst_list SL E Tys -> subst_list Tys A As -> styvar_list SL E.
induction on 1. intros. case H1. search.
	case H2. apply IH to H4 _. /* GEN_BY_SCRIPT  applys IH. */  search.
Theorem subst_list_i_is_styvar_list : forall SL E A As,
	subst_list_i SL E A As -> styvar_list SL E.
induction on 1. intros. case H1. search. apply IH to H2. /* GEN_BY_SCRIPT  applys IH. */  search.

Define simple_type : olist -> ty -> prop by
	simple_type E i;
	simple_type E top;
	simple_type E bot;
	nabla a, simple_type (E a) a := nabla a, member (tyvar a) (E a);
	nabla a, simple_type (E a) a := nabla a, member (styvar a) (E a).


Theorem simple_type_prune : forall E A, nabla (x : ty),
	simple_type E (A x) -> exists Ar, A = x\ Ar.
intros. case H1. % Manual Fix
	search. search. search. search.
	apply member_prune to H2.
	search.
	apply member_prune to H2.


Theorem subst_list_i_simple_type_det : forall L E A Ai,
	simple_type E A -> subst_list_i L E A Ai -> Ai = A.
induction on 2. intros. case H2. search.
	apply simple_type_prune to H1. /* GEN_BY_SCRIPT 
	applys simple_type_prune H1. */  apply IH to _ H3. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem subst_list_i_sty_det : forall L E Ai, nabla a,
	member (styvar a) (L a) -> subst_list_i (L a) (E a) a (Ai a) -> Ai = x\ i.
induction on 2. intros. case H2. case H1.
	case H1. apply IH to _ H3. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H1. apply subst_list_i_simple_type_det to _ _. /* GEN_BY_SCRIPT  applys subst_list_i_simple_type_det. */  search.
		apply member_prune to H4. /* GEN_BY_SCRIPT 
		applys member_prune H4. */ 


Theorem subst_list_i_mono_det : forall L E m Ai,
	mono E m -> subst_list_i L E m Ai -> Ai = m.
induction on 2. intros. case H2. search.
	apply mono_prune to H1. /* GEN_BY_SCRIPT 
	applys mono_prune H1. */  apply IH to _ H3. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem subst_list_i_wft_det : forall L E m Ai,
	wft E m -> subst_list_i L E m Ai -> Ai = m.
induction on 2. intros. case H2. search.
	apply wft_prune to H1. /* GEN_BY_SCRIPT 
	applys wft_prune H1. */  apply IH to _ H3. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem inst_list_simple_type_det : forall L E A Ai,
	simple_type E A -> inst_list L E A Ai -> Ai = A.
induction on 2. intros. case H2. search.
	apply simple_type_prune to H1. /* GEN_BY_SCRIPT 
	applys simple_type_prune H1. */  apply IH to _ H4. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem sub_list_i_ty : forall SL E SLE A Ai, nabla a,
	append (SL a) (E a) (SLE a) -> member (tyvar a) (SLE a) ->
	subst_list_i (SL a) (E a) (A a) (Ai a) ->
	exists SLr, SL = a\ SLr /\ member (tyvar a) (E a).
induction on 3. intros. case H3.
	case H1. search.
	case H1. case H2. apply IH to _ _ H4. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H1. case H2. apply append_prune_AB to H5. /* GEN_BY_SCRIPT  applys append_prune_AB H5. */  apply member_prune to H6. /* GEN_BY_SCRIPT  applys member_prune H6. */ 

Theorem tyvar_list_styvar_false : forall L E a,
	tyvar_list L E -> member (styvar a) L -> false.
induction on 1. intros. case H1. case H2.
	case H2. apply IH to H3 _ with a = a n1. /* GEN_BY_SCRIPT  applys IH with a = a n1. */  

Theorem subst_list_i_prune_sty_E : forall SL E A As, nabla a,
	subst_list_i (SL a) (E a) (A a) (As a) -> member (styvar a) (SL a) ->
	exists Er, E = a\ Er.
induction on 1. intros. case H1. case H2.
	case H2. apply IH to H3 _. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H2. search. apply member_prune to H4. /* GEN_BY_SCRIPT  applys member_prune H4. */ 

Theorem subst_list_i_prune_sty_L : forall SL E A As, nabla a,
	subst_list_i (SL a) (E a) (A a) (As a) -> member (styvar a) (E a) ->
	exists SLr, SL = a\ SLr.
induction on 1. intros. case H1. search.
	apply IH to H3 _. /* GEN_BY_SCRIPT 
	applys IH. */  search.
	apply member_prune to H2. /* GEN_BY_SCRIPT 
	applys member_prune H2. */ 

Theorem subst_list_i_wft : forall SL E A B,
	wft E A -> wft E B -> styvar_list SL E -> subst_list_i SL E A A.
induction on 3. intros. case H3. search.
	apply wft_prune to H1. /* GEN_BY_SCRIPT 
	applys wft_prune H1. */  apply wft_prune to H2. /* GEN_BY_SCRIPT  applys wft_prune H2. */  apply IH to H1 H2 H4. /* GEN_BY_SCRIPT  applys IH H1 H2. */  search.

Theorem subst_list_i_mono : forall SL E A B,
	mono E A -> mono E B -> styvar_list SL E -> subst_list_i SL E A A.
intros. apply mono_wft to H1. /* GEN_BY_SCRIPT  applys mono_wft H1. */  apply mono_wft to H2. /* GEN_BY_SCRIPT  applys mono_wft H2. */ 
	backchain subst_list_i_wft.

Theorem subst_list_wft : forall SL E Tys A,
	sty_inst_list SL E Tys -> wft E A -> subst_list Tys A A.
induction on 1. intros. case H1. search.
	apply wft_prune to H2. /* GEN_BY_SCRIPT 
	applys wft_prune H2. */  apply wft_prune to H3. /* GEN_BY_SCRIPT  applys wft_prune H3. */  apply IH to H4 _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem sty_inst_list_wfj : forall SL E SLE Tys,
	sty_inst_list SL E Tys -> wfj E -> append SL E SLE -> wfj SLE.
induction on 1. intros. case H1.
	case H3. search.
	case H3. apply append_prune_AB to H6. /* GEN_BY_SCRIPT  applys append_prune_AB H6. */  apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem subst_list_SLE_wft : forall SL E SLE Tys A As,
	sty_inst_list SL E Tys -> wfj E -> append SL E SLE -> wft SLE A ->
	subst_list Tys A As -> wft E As.
induction on 1. intros. case H1.
	case H3. case H5. search.
	case H3. case H5. apply append_prune_AB to H8. /* GEN_BY_SCRIPT  applys append_prune_AB H8. */ 
		W: apply wft_sty_ty to _ _ H4. /* GEN_BY_SCRIPT 
		W: applys wft_sty_ty H4. */ 
		W: apply wft_weaken_f to _ H6. /* GEN_BY_SCRIPT 
		W: applys wft_weaken_f H6. */ 
		W: apply wft_open to _ W W1. /* GEN_BY_SCRIPT 
		W: applys wft_open W W1. */  backchain sty_inst_list_wfj.
		apply IH to H7 _ _ _ _. /* GEN_BY_SCRIPT 
		applys IH. */ 
		search.

Theorem subst_list_wft_det : forall SL E T Tys A,
	sty_inst_list SL E Tys -> wft E A -> subst_list Tys A T -> A = T.
induction on 1. intros. case H1. case H3. search.
	apply wft_prune to H2. /* GEN_BY_SCRIPT 
	applys wft_prune H2. */  case H3. apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem subst_list_ty_fresh : forall SL E Tys, nabla a,
	sty_inst_list SL E Tys -> subst_list Tys a a.
induction on 1. intros. case H1. search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem subst_list_ty_fresh_det : forall Tys A, nabla a,
	subst_list Tys a (A a) -> A = z\ z.
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem subst_list_total : forall SL E Tys A,
	sty_inst_list SL E Tys -> exists A', subst_list Tys A A'.
induction on 1. intros. case H1. search.
	apply IH to H3 with A = A A1. /* GEN_BY_SCRIPT 
	applys IH with A = A A1. */  search.

Theorem member_prune_T[T] : forall (E : list T) B, nabla (x : ty),
	member (B x) E -> exists Fr, B = x\Fr.
induction on 1. intros. case H1.
	search. apply IH to H2. search.

Theorem subst_list_sty : forall SL E T Tys, nabla a,
	sty_inst_list (SL a) (E a) (Tys a) -> member (inst a T) (Tys a) -> wft (E a) T -> subst_list (Tys a) a T.
induction on 1. intros. case H1. case H2.
	case H2. apply wft_prune to H3. /* GEN_BY_SCRIPT  applys wft_prune H3. */  apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H2. apply subst_list_wft to H5 _ with A = A. /* GEN_BY_SCRIPT  applys subst_list_wft H5 with A = A. */  search.
		apply member_prune_T to H6. /* GEN_BY_SCRIPT 
		applys member_prune_T H6. */ 

Theorem subst_list_sty_det : forall SL E T Tys, nabla a,
	sty_inst_list (SL a) (E a) (Tys a) -> member (styvar a) (SL a) ->
	subst_list (Tys a) a (T a) ->
	exists Tr, nabla a, T = x\ Tr /\ wft (E a) Tr /\ member (inst a Tr) (Tys a).
induction on 1. intros. case H1. case H2.
	case H2. case H3. apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H2. case H3. apply subst_list_wft_det to H5 _ _. /* GEN_BY_SCRIPT  applys subst_list_wft_det H5. */  search.
		apply member_prune to H6. /* GEN_BY_SCRIPT 
		applys member_prune H6. */ 

Theorem subst_list_sty_E_id : forall SL E T Tys, nabla a,
	sty_inst_list SL (E a) (Tys a) -> member (styvar a) (E a) ->
	subst_list (Tys a) a (T a) -> T = z\ z.
induction on 1. intros. case H1. case H3. search.
	case H3. apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem subst_list_sty_det_mem : forall SL E T Tr Tys, nabla a,
	sty_inst_list (SL a) (E a) (Tys a) -> member (inst a Tr) (Tys a) ->
	subst_list (Tys a) a (T a) -> T = x\ Tr.
induction on 1. intros. case H1. case H2.
	case H2. case H3. apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H2. case H3. apply subst_list_wft_det to H5 _ _. /* GEN_BY_SCRIPT  applys subst_list_wft_det H5. */  search.
		apply member_prune_T to H6. /* GEN_BY_SCRIPT 
		applys member_prune_T H6. */ 


Theorem subst_list_i_arrow_split : forall L E A B ABi,
	subst_list_i L E (arrow A B) ABi ->
	exists Ai Bi, ABi = arrow Ai Bi /\
		subst_list_i L E A Ai /\ subst_list_i L E B Bi.
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem subst_list_i_all_match : forall L E A Ai,
	subst_list_i L E (all A) Ai ->
	exists ai, nabla a, Ai = all ai /\ subst_list_i L E (A a) (ai a).
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem subst_list_i_top_inv : forall SL E A, subst_list_i SL E A top -> A = top.
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  case H3. search.

Theorem inst_list_top_inv : forall L E A, inst_list L E A top -> A = top.
induction on 1. intros. case H1. search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH. */  case H4. search. case H2.

Theorem inst_list_i_inv : forall L E A, inst_list L E A i -> A = i \/ (name A /\ member (tyvar A) L).
induction on 1. intros. case H1. search.
	apply IH to H3. /* GEN_BY_SCRIPT 
	applys IH. */  case H4.
		case H5. search. search.
		case H5. case H7. search. search.

Theorem subst_list_i_arrow_inv : forall L E A Ai Bi,
	subst_list_i L E A (arrow Ai Bi) ->
	exists A1 A2, A = arrow A1 A2 /\
		subst_list_i L E A1 Ai /\ subst_list_i L E A2 Bi.
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  case H3. search.


Theorem subst_list_i_ty_inst_mono : forall SL E m A Ai, nabla a,
	subst_list_i SL E (A a) (Ai a) -> mono E m -> subst_list_i SL E (A m) (Ai m).
induction on 1. intros I M. I: case I. search.
	apply mono_prune to M. /* GEN_BY_SCRIPT 
	applys mono_prune M. */  I: apply IH to I _. /* GEN_BY_SCRIPT  I: applys IH. */  search.

Theorem subst_list_ty_inst_mono : forall SL E Tys m A Ai, nabla a,
	sty_inst_list SL E Tys -> subst_list Tys (A a) (Ai a) ->
	mono E m -> subst_list Tys (A m) (Ai m).
induction on 1. intros I SL M. I: case I. case SL. search.
	SL: case SL. apply mono_prune to M. /* GEN_BY_SCRIPT  applys mono_prune M. */  I: apply IH to I1 _ _. /* GEN_BY_SCRIPT  I: applys IH. */  search.

Theorem subst_list_ty_inst_wft : forall SL E Tys C A Ai, nabla a,
	sty_inst_list SL E Tys -> subst_list Tys (A a) (Ai a) ->
	wft E C -> subst_list Tys (A C) (Ai C).
induction on 1. intros I SL M. I: case I. case SL. search.
	SL: case SL. apply wft_prune to M. /* GEN_BY_SCRIPT  applys wft_prune M. */  I: apply IH to I1 _ _. /* GEN_BY_SCRIPT  I: applys IH. */  search.

Theorem subst_list_i_sty_i : forall L E A Ai, nabla a,
	subst_list_i L E (A a) (Ai a) -> subst_list_i (styvar a :: L) E (A a) (Ai i).
intros. case H1. search.
	apply subst_list_i_ty_inst_mono to _ _. /* GEN_BY_SCRIPT 
	applys subst_list_i_ty_inst_mono. */  search.

Theorem subst_list_arrow_split : forall Tys A B ABi,
	subst_list Tys (arrow A B) ABi ->
	exists Ai Bi, ABi = arrow Ai Bi /\
		subst_list Tys A Ai /\ subst_list Tys B Bi.
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem subst_list_det : forall Tys A A1 A2,
	subst_list Tys A A1 -> subst_list Tys A A2 -> A1 = A2.
induction on 1. intros. case H1. % Manual Fix case H2. search.
case H2. search. case H2.
	apply IH to H3 H4. /* GEN_BY_SCRIPT 
	applys IH H3 H4. */  search.

Theorem subst_list_arrow_combine : forall SL E Tys A B Ai Bi,
	sty_inst_list SL E Tys ->
	subst_list Tys A Ai -> subst_list Tys B Bi ->
	subst_list Tys (arrow A B) (arrow Ai Bi).
intros. apply subst_list_total to _ with A = arrow A B. /* GEN_BY_SCRIPT  applys subst_list_total with A = arrow A B. */ 
	apply subst_list_arrow_split to _. /* GEN_BY_SCRIPT 
	applys subst_list_arrow_split. */ 
	apply subst_list_det to H5 _. /* GEN_BY_SCRIPT 
	applys subst_list_det H5. */  apply subst_list_det to H6 _. /* GEN_BY_SCRIPT  applys subst_list_det H6. */ 
	search.

Theorem subst_list_all_match : forall Tys A Ai,
	subst_list Tys (all A) Ai ->
	exists ai, nabla a, Ai = all ai /\ subst_list Tys (A a) (ai a).
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem subst_list_all_match_inv : forall SL E Tys A Ai,
	sty_inst_list SL E Tys -> subst_list Tys A (all Ai) ->
	(name A /\ member (styvar A) SL) \/ exists a, nabla x, A = all a /\ subst_list Tys (a x) (Ai x).
induction on 1. intros. case H1. case H2. search.
	case H2. apply IH to H4 _. /* GEN_BY_SCRIPT  applys IH. */  case H6.
		case H7. case H9. search. search.
		case H7. search. search.

Theorem subst_list_subst_all_inv : forall SL E Tys A Ai C,
	sty_inst_list SL E Tys -> subst_list Tys (A C) Ai ->
	wft E C -> exists ai, Ai = ai C /\ subst_list Tys (all A) (all ai).
induction on 1. intros. case H1.
	case H2. exists A. search.
	case H2. apply wft_prune to H3. /* GEN_BY_SCRIPT  applys wft_prune H3. */ 
		apply IH to H5 _ _ with A = A A1. /* GEN_BY_SCRIPT 
		applys IH with A = A A1. */ 
		exists ai. search.

Theorem subst_list_i_all_match_inv : forall SL E A Ai,
	subst_list_i SL E A (all Ai) ->
	exists a, nabla x, A = all a /\ subst_list_i SL E (a x) (Ai x).
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  case H3. search.

Theorem subst_list_i_var_inv : forall SL E A Ai,
	subst_list_i SL E A Ai -> name Ai -> A = Ai.
induction on 1. intros. case H1. search.
	apply IH to H3 _. /* GEN_BY_SCRIPT 
	applys IH. */  case H2. case H4. search.

Theorem subst_list_i_i_inv : forall SL E A,
	subst_list_i SL E A i -> A = i \/ (name A /\ member (styvar A) SL).
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  case H3. case H4. search. search.
		case H4. case H6. search.

Theorem tyvar_list_weaken : forall L F E FE,
	append F E FE -> tyvar_list L FE -> tyvar_list L E.
induction on 2. intros. case H2. search.
	apply append_prune to H1. /* GEN_BY_SCRIPT 
	applys append_prune H1. */  apply IH to _ H3. /* GEN_BY_SCRIPT  applys IH. */  search.


Theorem sty_inst_list_exists : forall SL E,
	styvar_list SL E -> exists Tys, sty_inst_list SL E Tys.
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Theorem sty_inst_list_exists_a : forall SL E T, nabla a,
	styvar_list (SL a) (E a) -> member (styvar a) (SL a) -> wft (E a) T ->
	exists Tys, nabla a,
		sty_inst_list (SL a) (E a) (Tys a) /\ member (inst a T) (Tys a).
induction on 1. intros. case H1. case H2.
	case H2. apply wft_prune to H3. /* GEN_BY_SCRIPT  applys wft_prune H3. */  apply IH to H4 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.
	apply sty_inst_list_exists to H4. /* GEN_BY_SCRIPT 
	applys sty_inst_list_exists H4. */  search.

Theorem sty_inst_list_exists_ab : forall SL E A B, nabla a b,
	styvar_list (SL a b) (E a b) ->
	member (styvar a) (SL a b) -> member (styvar b) (SL a b) ->
	wft (E a b) A -> wft (E a b) B ->
	exists Tys, nabla a b,
		sty_inst_list (SL a b) (E a b) (Tys a b) /\
		member (inst a A) (Tys a b) /\ member (inst b B) (Tys a b).
induction on 1. intros. case H1. case H2.
	case H2. case H3.
		apply wft_prune to H4. /* GEN_BY_SCRIPT 
		applys wft_prune H4. */ 
		apply wft_prune to H5. /* GEN_BY_SCRIPT 
		applys wft_prune H5. */ 
		apply IH to H6 _ _ H4 H5. /* GEN_BY_SCRIPT 
		applys IH H4 H5. */  search.
	case H2. apply sty_inst_list_exists_a to H6 _ _ with T = A. /* GEN_BY_SCRIPT  applys sty_inst_list_exists_a H6 with T = A. */  search.
	case H3. apply sty_inst_list_exists_a to H6 _ _ with T = B. /* GEN_BY_SCRIPT  applys sty_inst_list_exists_a H6 with T = B. */  search.

Theorem sty_inst_list_exists_all_i : forall SL E,
	styvar_list SL E -> exists Tys, sty_inst_list SL E Tys /\
		forall A As, subst_list_i SL E A As -> subst_list Tys A As.
induction on 1. intros. case H1.
	exists nil. split. search. intros. case H2. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */ 
		exists (inst n1 i :: Tys). split. search.
		intros. case H5. apply H4 to _. /* GEN_BY_SCRIPT  applys H4. */  search.

Theorem sty_inst_list_exists_T : forall SL E Tys, nabla a,
	sty_inst_list (SL a) (E a) (Tys a) -> member (styvar a) (SL a) ->
	exists T, nabla a, wft (E a) T /\ member (inst a T) (Tys a).
induction on 1. intros. case H1. case H2.
	case H2. apply IH to H4 _. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H2. search. apply member_prune to H5. /* GEN_BY_SCRIPT  applys member_prune H5. */ 


Theorem sty_inst_list_prune : forall SL E Ty_, nabla (a : ty),
	sty_inst_list SL E (Ty_ a) -> exists Tys, Ty_ = a\ Tys.
induction on 1. intros. case H1. search.
	apply wft_prune to H2. /* GEN_BY_SCRIPT 
	applys wft_prune H2. */  apply IH to H3. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem sty_inst_list_mono : forall SL E SLE Tys m,
	append SL E SLE -> sty_inst_list SL E Tys -> wfj E -> mono SLE m -> mono E m.
induction on 2. intros. case H2. case H1. search.
	W: apply sty_inst_list_wfj to _ _ H1. /* GEN_BY_SCRIPT 
	W: applys sty_inst_list_wfj H1. */ 
		case H1. apply mono_prune_styvar to _ _ H4. /* GEN_BY_SCRIPT  applys mono_prune_styvar H4. */ 
		apply append_prune_AB to H7. /* GEN_BY_SCRIPT 
		applys append_prune_AB H7. */ 
		apply mono_strenthen_styvar_fresh to _ _ H4. /* GEN_BY_SCRIPT 
		applys mono_strenthen_styvar_fresh H4. */ 
		apply IH to _ H6 _ _. /* GEN_BY_SCRIPT 
		applys IH. */ 
		search.

Theorem subst_list_prune_R : forall Tys A A_, nabla (a : ty),
	subst_list Tys A (A_ a) -> exists As, A_ = x\ As.
induction on 1. intros. case H1. search. apply IH to H2. /* GEN_BY_SCRIPT  applys IH. */  search.

Theorem sty_inst_list_prune_sty : forall SL E_ Tys, nabla (a : ty),
	sty_inst_list (SL a) (E_ a) (Tys a) -> member (styvar a) (SL a) -> exists E, E_ = a\ E.
induction on 1. intros. case H1. case H2.
	case H2. apply IH to H4 _. /* GEN_BY_SCRIPT  applys IH. */  search.
	search.

Theorem sty_inst_list_prune_sty_SL : forall SL_ E Tys, nabla (a : ty),
	sty_inst_list (SL_ a) (E a) (Tys a) -> member (styvar a) (E a) ->
	exists SL, SL_ = x\ SL.
induction on 1. intros. case H1. search.
	apply IH to H4 _. /* GEN_BY_SCRIPT 
	applys IH. */  search.
	apply member_prune to H2. /* GEN_BY_SCRIPT 
	applys member_prune H2. */ 

Theorem subst_list_prune_sty_R : forall SL E_ Tys A A_, nabla (a : ty),
	sty_inst_list (SL a) (E_ a) (Tys a) -> member (styvar a) (SL a) ->
	subst_list (Tys a) (A a) (A_ a) -> exists As E, A_ = x\ As /\ E_ = x\ E.
induction on 1. intros. apply sty_inst_list_prune_sty to _ _. /* GEN_BY_SCRIPT  applys sty_inst_list_prune_sty. */  case H1. case H2.
	case H2. case H3. apply wft_prune to H4. /* GEN_BY_SCRIPT  applys wft_prune H4. */  apply IH to H5 _ _. /* GEN_BY_SCRIPT  applys IH. */  search.
	case H3. search.

Theorem tyvar_list_add_sty : forall L E, nabla a,
	tyvar_list L E -> tyvar_list L (styvar a :: E).
induction on 1. intros. case H1. search.
	apply IH to H2. /* GEN_BY_SCRIPT 
	applys IH. */  search.

Define fresh_olist : ty -> olist -> prop by
	nabla x, fresh_olist x L.


Theorem wft_sty_move_back : forall G F E GxFE GFxE A, nabla a,
	split3 G (styvar a :: F) E (GxFE a) -> split3 G F (styvar a :: E) (GFxE a) ->
	wft (GxFE a) (A a) -> wft (GFxE a) (A a).
induction on 3. intros S S W. W: case W. % Manual Fix try search.
search. search. search.
	M: apply split3_mem_inv to _ W. /* GEN_BY_SCRIPT 
	M: applys split3_mem_inv W. */  M: case M.
		apply split3_mem to S1 _. /* GEN_BY_SCRIPT 
		applys split3_mem S1. */  search.
		M: case M. apply split3_mem to S1 _. /* GEN_BY_SCRIPT  applys split3_mem S1. */  search.
		apply split3_mem to S1 _ with X = tyvar n2. /* GEN_BY_SCRIPT 
		applys split3_mem S1 with X = tyvar n2. */  search.
	M: apply split3_mem_inv to _ W. /* GEN_BY_SCRIPT 
	M: applys split3_mem_inv W. */  M: case M.
		apply member_prune to M. /* GEN_BY_SCRIPT 
		applys member_prune M. */ 
		M: case M. apply member_prune to M. /* GEN_BY_SCRIPT  applys member_prune M. */ 
		apply member_prune to M. /* GEN_BY_SCRIPT 
		applys member_prune M. */ 
	M: apply split3_mem_inv to _ W. /* GEN_BY_SCRIPT 
	M: applys split3_mem_inv W. */  M: case M.
		apply split3_mem to S1 _. /* GEN_BY_SCRIPT 
		applys split3_mem S1. */  search.
		M: case M. apply split3_mem to S1 _. /* GEN_BY_SCRIPT  applys split3_mem S1. */  search.
		apply split3_mem to S1 _ with X = styvar n2. /* GEN_BY_SCRIPT 
		applys split3_mem S1 with X = styvar n2. */  search.
	apply split3_mem to S1 _. /* GEN_BY_SCRIPT 
	applys split3_mem S1. */  search.
	apply IH to _ _ W. /* GEN_BY_SCRIPT 
	applys IH W. */  apply IH to _ _ W1. /* GEN_BY_SCRIPT  applys IH W1. */  search.
	apply split3_cons to S with X = tyvar n2. /* GEN_BY_SCRIPT 
	applys split3_cons S with X = tyvar n2. */ 
		apply split3_cons to S1 with X = tyvar n2. /* GEN_BY_SCRIPT 
		applys split3_cons S1 with X = tyvar n2. */ 
		apply IH to H1 H2 W. /* GEN_BY_SCRIPT 
		applys IH H1 H2. */  search.


Define ty_basic : ty -> prop by
	ty_basic i;
	ty_basic top;
	ty_basic bot;
	nabla a, ty_basic a.

Define ty_scheme_2 : ty -> ty -> prop by
	ty_scheme_2 (arrow A1 A2) (arrow B1 B2) := ty_scheme_2 B1 A1 /\ ty_scheme_2 A2 B2;
	ty_scheme_2 (all A) (all B) := nabla a, ty_scheme_2 (A a) (B a);

	ty_scheme_2 (all A) B := nabla a, ty_scheme_2 (A a) B /\ notAll_ B;
	ty_scheme_2 A (all B) := nabla a, ty_scheme_2 A (B a) /\ notAll_ A;

	ty_scheme_2 (arrow A1 A2) B := ty_scheme_2 B A1 /\ ty_scheme_2 A2 B /\ ty_basic B;
	ty_scheme_2 A (arrow B1 B2) := ty_scheme_2 B1 A /\ ty_scheme_2 A B2 /\ ty_basic A;

	ty_scheme_2 A B := ty_basic A /\ ty_basic B.



% try: just i, gen, gen subst_list, better scheme
Theorem sub_C_sty : forall SL SLE La E LaE Lb LbE A B Ai Bi Asi Bsi,
	append SL E SLE ->
	append La SLE LaE -> tyvar_list La SLE -> wft LaE A ->
	append Lb SLE LbE -> tyvar_list Lb SLE -> wft LbE B ->
	wfj E ->
	(forall Tys As Bs, sty_inst_list SL E Tys -> subst_list Tys A As -> subst_list Tys B Bs ->
		exists Ai Bi, inst_list La E As Ai /\ inst_list Lb E Bs Bi /\ sub E Ai Bi) ->
	inst_list La E A Ai -> inst_list Lb E B Bi ->
	subst_list_i SL E Ai Asi ->
	subst_list_i SL E Bi Bsi ->
	sub E Asi Bsi ->
	ty_scheme_2 A B ->
	sub SLE Ai Bi.
induction on 15. intros ASL Aa TLa Wa Ab TLb Wb WE All Ia Ib SLa SLb S TyScheme.
	%% Auxilary lemmas
	aux_A_ty: assert name A -> member (tyvar A) LaE -> (
				% a \in L
				member (tyvar A) La /\ fresh_olist A SLE /\
					exists M, Ai = M /\ Asi = M /\ mono E M
			) \/ (
				% a \in E
				member (tyvar A) E /\ fresh_olist A SL /\
					Ai = A /\ Asi = A
			).
		intros name M. case name.
		M: apply append_mem_inv to _ M. /* GEN_BY_SCRIPT 
		M: applys append_mem_inv M. */  M: case M1.
		% a \in L
			apply tyvar_list_prune_E_ty to _ M1. /* GEN_BY_SCRIPT 
		% a \in L
			applys tyvar_list_prune_E_ty M1. */ 
			apply append_prune to ASL. /* GEN_BY_SCRIPT 
			applys append_prune ASL. */ 
			M: apply inst_list_a_inL_isMono to _ Ia. /* GEN_BY_SCRIPT 
			M: applys inst_list_a_inL_isMono Ia. */ 
			SL: apply subst_list_i_mono_det to _ SLa. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_mono_det SLa. */ 
			search. % left
		% a \in E
			M: apply sub_list_i_ty to _ M1 _. /* GEN_BY_SCRIPT  % left
		% a \in E
			M: applys sub_list_i_ty M1. */ 
			apply tyvar_list_prune_L_ty to TLa _. /* GEN_BY_SCRIPT 
			applys tyvar_list_prune_L_ty TLa. */ 
			apply inst_list_ty_det to Ia. /* GEN_BY_SCRIPT 
			applys inst_list_ty_det Ia. */ 
			SL: apply subst_list_i_simple_type_det to _ SLa. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_simple_type_det SLa. */ 
			search.

	aux_B_ty: assert name B -> member (tyvar B) LbE -> (
				% b \in L
				member (tyvar B) Lb /\ fresh_olist B SLE /\
					exists M, Bi = M /\ Bsi = M /\ mono E M
			) \/ (
				% b \in E
				member (tyvar B) E /\ fresh_olist B SL /\
					Bi = B /\ Bsi = B
			).
		intros name M. case name.
		M: apply append_mem_inv to _ M. /* GEN_BY_SCRIPT 
		M: applys append_mem_inv M. */  M: case M1.
		% a \in L
			apply tyvar_list_prune_E_ty to _ M1. /* GEN_BY_SCRIPT 
		% a \in L
			applys tyvar_list_prune_E_ty M1. */ 
			apply append_prune to ASL. /* GEN_BY_SCRIPT 
			applys append_prune ASL. */ 
			M: apply inst_list_a_inL_isMono to _ Ib. /* GEN_BY_SCRIPT 
			M: applys inst_list_a_inL_isMono Ib. */ 
			SL: apply subst_list_i_mono_det to _ SLb. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_mono_det SLb. */ 
			search. % left
		% a \in E
			M: apply sub_list_i_ty to _ M1 _. /* GEN_BY_SCRIPT  % left
		% a \in E
			M: applys sub_list_i_ty M1. */ 
			apply tyvar_list_prune_L_ty to TLb _. /* GEN_BY_SCRIPT 
			applys tyvar_list_prune_L_ty TLb. */ 
			apply inst_list_ty_det to Ib. /* GEN_BY_SCRIPT 
			applys inst_list_ty_det Ib. */ 
			SL: apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_simple_type_det SLb. */ 
			search.

	aux_A_sty: assert name A -> member (styvar A) LaE -> fresh_olist A La /\ fresh_olist A Lb /\ (
				% ~a \in SL
				member (styvar A) SL /\ Ai = A /\ Asi = i
			) \/ (
				% ~a \in E
				member (styvar A) E /\ fresh_olist A SL /\ Ai = A /\ Asi = A
			).
		intros name M. case name.
		M: apply append_mem_inv to _ M. /* GEN_BY_SCRIPT 
		M: applys append_mem_inv M. */  M: case M1. apply tyvar_list_styvar_false to _ M1. /* GEN_BY_SCRIPT  applys tyvar_list_styvar_false M1. */ 
		apply tyvar_list_prune_L_sty to TLa M1. /* GEN_BY_SCRIPT 
		applys tyvar_list_prune_L_sty M1 TLa. */  apply tyvar_list_prune_L_sty to TLb M1. /* GEN_BY_SCRIPT  applys tyvar_list_prune_L_sty M1 TLb. */ 
		apply inst_list_ty_det to Ia. /* GEN_BY_SCRIPT 
		applys inst_list_ty_det Ia. */ 
		M: apply append_mem_inv to _ M1. /* GEN_BY_SCRIPT 
		M: applys append_mem_inv M1. */  M: case M2.
		% ~a \in SL
			apply subst_list_i_sty_det to _ _. /* GEN_BY_SCRIPT 
		% ~a \in SL
			applys subst_list_i_sty_det. */  search.
		% ~a \in E
			apply subst_list_i_prune_sty_L to _ M2. /* GEN_BY_SCRIPT 
		% ~a \in E
			applys subst_list_i_prune_sty_L M2. */ 
			apply subst_list_i_simple_type_det to _ SLa. /* GEN_BY_SCRIPT 
			applys subst_list_i_simple_type_det SLa. */ 
			search.

	aux_B_sty: assert name B -> member (styvar B) LbE -> fresh_olist B La /\ fresh_olist B Lb /\ (
				% ~b \in SL
				member (styvar B) SL /\ Bi = B /\ Bsi = i
			) \/ (
				% ~b \in E
				member (styvar B) E /\ fresh_olist B SL /\ Bi = B /\ Bsi = B
			).
		intros name M. case name.
		M: apply append_mem_inv to _ M. /* GEN_BY_SCRIPT 
		M: applys append_mem_inv M. */  M: case M1. apply tyvar_list_styvar_false to _ M1. /* GEN_BY_SCRIPT  applys tyvar_list_styvar_false M1. */ 
		apply tyvar_list_prune_L_sty to TLa M1. /* GEN_BY_SCRIPT 
		applys tyvar_list_prune_L_sty M1 TLa. */  apply tyvar_list_prune_L_sty to TLb M1. /* GEN_BY_SCRIPT  applys tyvar_list_prune_L_sty M1 TLb. */ 
		apply inst_list_ty_det to Ib. /* GEN_BY_SCRIPT 
		applys inst_list_ty_det Ib. */ 
		M: apply append_mem_inv to _ M1. /* GEN_BY_SCRIPT 
		M: applys append_mem_inv M1. */  M: case M2.
		% ~a \in SL
			apply subst_list_i_sty_det to _ _. /* GEN_BY_SCRIPT 
		% ~a \in SL
			applys subst_list_i_sty_det. */  search.
		% ~a \in E
			apply subst_list_i_prune_sty_L to _ M2. /* GEN_BY_SCRIPT 
		% ~a \in E
			applys subst_list_i_prune_sty_L M2. */ 
			apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT 
			applys subst_list_i_simple_type_det SLb. */ 
			search.
	%%
Wa: case Wa (keep).
	% A = i
	apply inst_list_simple_type_det to _ Ia. /* GEN_BY_SCRIPT 
	% A = i
	applys inst_list_simple_type_det Ia. */  apply subst_list_i_simple_type_det to _ SLa. /* GEN_BY_SCRIPT  applys subst_list_i_simple_type_det SLa. */ 
		Wb: case Wb (keep). % Manual Fix
			apply inst_list_simple_type_det to _ Ib. search.
			apply inst_list_simple_type_det to _ Ib. search.
		% B = bot   false
			apply inst_list_bot_det to Ib. /* GEN_BY_SCRIPT 
		% B = bot   false
			applys inst_list_bot_det Ib. */  apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT  applys subst_list_i_simple_type_det SLb. */ 
			case S.
		% B = c
			M: apply append_mem_inv to _ Wb1. /* GEN_BY_SCRIPT 
		% B = c
			M: applys append_mem_inv Wb1. */  M: case M.
			% c \in L
				apply tyvar_list_prune_E_ty to _ M. /* GEN_BY_SCRIPT 
			% c \in L
				applys tyvar_list_prune_E_ty M. */ 
				apply append_prune to ASL. /* GEN_BY_SCRIPT 
				applys append_prune ASL. */  rename FA to SL. rename FB to E.
				M: apply inst_list_a_inL_isMono to M _ with a = n1, m = Bi. /* GEN_BY_SCRIPT 
				M: applys inst_list_a_inL_isMono M  with a = n1, m = Bi. */ 
				SL: apply subst_list_i_mono_det to _ SLb. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_mono_det SLb. */ 
				S: case S. % Manual Fix M: case M1. search.
					M: case M1. search. search.
			% c \in E
				M: apply sub_list_i_ty to _ M _. /* GEN_BY_SCRIPT 
			% c \in E
				M: applys sub_list_i_ty M. */ 
				apply tyvar_list_prune_L_ty to TLb _. /* GEN_BY_SCRIPT 
				applys tyvar_list_prune_L_ty TLb. */ 
				apply inst_list_ty_det to Ib. /* GEN_BY_SCRIPT 
				applys inst_list_ty_det Ib. */ 
				SL: apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_simple_type_det SLb. */ 
				case S.
		% ~a
			M: apply append_mem_inv to _ Wb1. /* GEN_BY_SCRIPT 
		% ~a
			M: applys append_mem_inv Wb1. */  M: case M. apply tyvar_list_styvar_false to _ M. /* GEN_BY_SCRIPT  applys tyvar_list_styvar_false M. */ 
			apply tyvar_list_prune_L_sty to _ M. /* GEN_BY_SCRIPT 
			applys tyvar_list_prune_L_sty M. */  apply tyvar_list_prune_L_sty to TLb M. /* GEN_BY_SCRIPT  applys tyvar_list_prune_L_sty M TLb. */ 
				apply inst_list_ty_det to Ib. /* GEN_BY_SCRIPT 
				applys inst_list_ty_det Ib. */ 
			M: apply append_mem_inv to _ M. /* GEN_BY_SCRIPT 
			M: applys append_mem_inv M. */  M: case M1.
			% ~a \in SL
				STL: apply subst_list_i_is_styvar_list to SLa. /* GEN_BY_SCRIPT 
			% ~a \in SL
				STL: applys subst_list_i_is_styvar_list SLa. */ 
				Tys: apply sty_inst_list_exists_a to STL _ _ with T = bot. /* GEN_BY_SCRIPT 
				Tys: applys sty_inst_list_exists_a STL with T = bot. */ 
				SL: apply subst_list_sty to _ Tys1 _. /* GEN_BY_SCRIPT 
				SL: applys subst_list_sty Tys1. */ 
				SL: apply subst_list_wft to Tys _. /* GEN_BY_SCRIPT 
				SL: applys subst_list_wft Tys. */ 
				S: apply All to _ SL1 SL. /* GEN_BY_SCRIPT 
				S: applys All SL1 SL. */ 
					I: apply inst_list_i_det to S1. /* GEN_BY_SCRIPT 
					I: applys inst_list_i_det S1. */  I: apply inst_list_bot_det to S2. /* GEN_BY_SCRIPT  I: applys inst_list_bot_det S2. */ 
					case S3.
			% ~a \in E
				apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT 
			% ~a \in E
				applys subst_list_i_simple_type_det SLb. */  case S.
		% B = ->   false
			I: apply inst_list_arrow_split to Ib. /* GEN_BY_SCRIPT 
		% B = ->   false
			I: applys inst_list_arrow_split Ib. */ 
			SL: apply subst_list_i_arrow_split to SLb. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_arrow_split SLb. */  case S.
		% B = forall   false
			I: apply inst_list_all_match to Ib. /* GEN_BY_SCRIPT 
		% B = forall   false
			I: applys inst_list_all_match Ib. */ 
			SL: apply subst_list_i_all_match to SLb. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_all_match SLb. */  case S.
	% A = top
		I: apply inst_list_simple_type_det to _ Ia. /* GEN_BY_SCRIPT 
	% A = top
		I: applys inst_list_simple_type_det Ia. */ 
		SL: apply subst_list_i_simple_type_det to _ SLa. /* GEN_BY_SCRIPT 
		SL: applys subst_list_i_simple_type_det SLa. */ 
		case S.
		apply subst_list_i_top_inv to SLb. /* GEN_BY_SCRIPT 
		applys subst_list_i_top_inv SLb. */ 
		search.
	% A = bot
		I: apply inst_list_simple_type_det to _ Ia. /* GEN_BY_SCRIPT 
	% A = bot
		I: applys inst_list_simple_type_det Ia. */ 
		SL: apply subst_list_i_simple_type_det to _ SLa. /* GEN_BY_SCRIPT 
		SL: applys subst_list_i_simple_type_det SLa. */ 
		SL: apply subst_list_i_is_styvar_list to _. /* GEN_BY_SCRIPT 
		SL: applys subst_list_i_is_styvar_list. */ 
		W: apply styvar_list_wfj to _ _ _. /* GEN_BY_SCRIPT 
		W: applys styvar_list_wfj. */  W: apply tyvar_list_wfj to TLb _ _. /* GEN_BY_SCRIPT  W: applys tyvar_list_wfj TLb. */ 
		W: apply inst_list_wft_f to Ib _ _ _ _ _ _. /* GEN_BY_SCRIPT 
		W: applys inst_list_wft_f Ib. */ 
		search.
	% A = a
		A: apply aux_A_ty to _ _. /* GEN_BY_SCRIPT 
	% A = a
		A: applys aux_A_ty. */  A: case A. clear aux_A_ty aux_A_sty.
		% a \in L
			case A1. rename L to SLE.
			apply append_prune to ASL. /* GEN_BY_SCRIPT 
			applys append_prune ASL. */  rename FA to SL. rename FB to E.
			apply mono_prune to A2. /* GEN_BY_SCRIPT 
			applys mono_prune A2. */ 
			Wb: case Wb (keep).
			% B = i
				apply inst_list_simple_type_det to _ Ib. /* GEN_BY_SCRIPT 
			% B = i
				applys inst_list_simple_type_det Ib. */ 
				apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT 
				applys subst_list_i_simple_type_det SLb. */ 
				case S. % Manual Fix case A2; search.
					case A2. search. case A2. case A2.
			% B = top
				apply inst_list_simple_type_det to _ Ib. /* GEN_BY_SCRIPT 
			% B = top
				applys inst_list_simple_type_det Ib. */ 
				apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT 
				applys subst_list_i_simple_type_det SLb. */ 
				case S. % Manual Fix
					case A2. apply wft_weaken_f to _ H1. search. apply wft_weaken_f to _ H1. search. apply wft_weaken_f to _ H1. search.
					case A2.
					case A2.
			% B = bot
				apply inst_list_simple_type_det to _ Ib. /* GEN_BY_SCRIPT 
			% B = bot
				applys inst_list_simple_type_det Ib. */ 
				apply subst_list_i_simple_type_det to _ SLb. /* GEN_BY_SCRIPT 
				applys subst_list_i_simple_type_det SLb. */ 
				case S. % Manual Fix case A2; search.
					case A2. case A2.
			% B = b
				B: apply aux_B_ty to _ _. /* GEN_BY_SCRIPT 
			% B = b
				B: applys aux_B_ty. */  B: case B.
				% b \in L
					case B1. rename L to SLE.
					apply append_prune to ASL. /* GEN_BY_SCRIPT 
					applys append_prune ASL. */  rename FA to SL. rename FB to E.
					apply mono_prune to A2. /* GEN_BY_SCRIPT 
					applys mono_prune A2. */ 
					apply mono_prune to B2. /* GEN_BY_SCRIPT 
					applys mono_prune B2. */  apply mono_prune to B2. /* GEN_BY_SCRIPT  applys mono_prune B2. */ 
					apply sub_mono to _ _ _ with A = m1, B = m3. /* GEN_BY_SCRIPT 
					applys sub_mono with A = m1, B = m3. */ 
					W: apply mono_wft to A2. /* GEN_BY_SCRIPT 
					W: applys mono_wft A2. */  W: apply wft_weaken_f to _ W. /* GEN_BY_SCRIPT  W: applys wft_weaken_f W. */ 
					S: apply sub_refl to W1. /* GEN_BY_SCRIPT 
					S: applys sub_refl W1. */  search.
				% b \in E
					M: apply append_mem to ASL _. /* GEN_BY_SCRIPT 
				% b \in E
					M: applys append_mem ASL. */ 
					case S. % Manual Fix case A2; search.
						case A2. search. case A2. search. case A2.
			% B = a
				B: apply aux_B_ty to _ _. /* GEN_BY_SCRIPT 
			% B = a
				B: applys aux_B_ty. */  B: case B.
				% B \in L
					apply mono_prune to B2. /* GEN_BY_SCRIPT 
				% B \in L
					applys mono_prune B2. */ 
					apply sub_mono to _ _ _ with A = m, B = m1. /* GEN_BY_SCRIPT 
					applys sub_mono with A = m, B = m1. */ 
					W: apply mono_wft to A2. /* GEN_BY_SCRIPT 
					W: applys mono_wft A2. */  W: apply wft_weaken_f to _ W. /* GEN_BY_SCRIPT  W: applys wft_weaken_f W. */ 
					S: apply sub_refl to W1. /* GEN_BY_SCRIPT 
					S: applys sub_refl W1. */  search.
				% B \in E
					apply member_prune to B. /* GEN_BY_SCRIPT 
				% B \in E
					applys member_prune B. */ 
			% B = ~b
				B: apply aux_B_sty to _ _. /* GEN_BY_SCRIPT 
			% B = ~b
				B: applys aux_B_sty. */  B: case B.
				% ~b \in SL
					STL: apply subst_list_i_is_styvar_list to SLa. /* GEN_BY_SCRIPT 
				% ~b \in SL
					STL: applys subst_list_i_is_styvar_list SLa. */ 
					Tys: apply sty_inst_list_exists_a to STL _ _ with T = bot. /* GEN_BY_SCRIPT 
					Tys: applys sty_inst_list_exists_a STL with T = bot. */  permute (n1 n2) Tys.
					SL: apply subst_list_sty to _ Tys1 _. /* GEN_BY_SCRIPT 
					SL: applys subst_list_sty Tys1. */ 
					SL: apply subst_list_ty_fresh to Tys. /* GEN_BY_SCRIPT 
					SL: applys subst_list_ty_fresh Tys. */ 
					S: apply All to Tys _ _. /* GEN_BY_SCRIPT 
					S: applys All Tys. */ 
						I: apply inst_list_a_inL_isMono to _ S1. /* GEN_BY_SCRIPT 
						I: applys inst_list_a_inL_isMono S1. */  I: apply inst_list_bot_det to S2. /* GEN_BY_SCRIPT  I: applys inst_list_bot_det S2. */ 
						case S3. case I. case I.
				% ~b \in E
					S: case S. M: case A2. M: case A2.
						apply wfj_tyvar_styvar to _ M _. /* GEN_BY_SCRIPT 
						applys wfj_tyvar_styvar M. */ 
						M: case A2.
						apply wfj_tyvar_styvar to _ M _. /* GEN_BY_SCRIPT 
						applys wfj_tyvar_styvar M. */ 
						M: case A2.
			% B = ~a
				B: apply aux_B_sty to _ _. /* GEN_BY_SCRIPT 
			% B = ~a
				B: applys aux_B_sty. */  B: case B.
				% ~b \in SL
					apply member_prune to B2. /* GEN_BY_SCRIPT 
				% ~b \in SL
					applys member_prune B2. */ 
				% ~b \in E
					S: case S. M: case A2. M: case A2.
			% B = ->
				clear aux_B_ty aux_B_sty.
				I: apply inst_list_arrow_split to Ib. /* GEN_BY_SCRIPT 
				I: applys inst_list_arrow_split Ib. */ 
				SL: apply subst_list_i_arrow_split to SLb. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_arrow_split SLb. */ 
				S: case S. % Manual Fix
				M: case A2. M: case A2.
				SL: apply subst_list_i_is_styvar_list to _. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_is_styvar_list. */ 

				TySc: case TyScheme. % Manual Fix try solve case TySc1.
				
				apply subst_list_i_mono to M _ _. /* GEN_BY_SCRIPT 
				
				applys subst_list_i_mono M. */ 
				Ind: apply 1 IH to _ _ _ Wb1 _ _ Wa _ _ I _ SL _ _ TySc with Bi = m1. /* GEN_BY_SCRIPT 
				Ind: applys 1 IH Wb1 Wa TySc I SL with Bi = m1. */ 
					TL: apply tyvar_list_weaken to _ TLa. /* GEN_BY_SCRIPT 
					TL: applys tyvar_list_weaken TLa. */ 
						apply inst_list_ty_L_mono to TL _ M. /* GEN_BY_SCRIPT 
						applys inst_list_ty_L_mono M TL. */  search.
					% Main condition
						intros Tys SL SL.
						apply sty_inst_list_prune to Tys. /* GEN_BY_SCRIPT 
						applys sty_inst_list_prune Tys. */ 
						apply subst_list_ty_fresh_det to SL4. /* GEN_BY_SCRIPT 
						applys subst_list_ty_fresh_det SL4. */ 
						SL: apply subst_list_total to Tys with A = arrow (A1 n1) (B1 n1). /* GEN_BY_SCRIPT 
						SL: applys subst_list_total Tys with A = arrow (A1 n1) (B1 n1). */ 
						SL: apply subst_list_arrow_split to SL5. /* GEN_BY_SCRIPT 
						SL: applys subst_list_arrow_split SL5. */ 
						apply subst_list_det to *SL6 _. /* GEN_BY_SCRIPT 
						applys subst_list_det *SL6. */ 
						S: apply All to Tys _ _. /* GEN_BY_SCRIPT 
						S: applys All Tys. */ 
						M: apply inst_list_a_inL_isMono to _ S2. /* GEN_BY_SCRIPT 
						M: applys inst_list_a_inL_isMono S2. */ 
						I: apply inst_list_arrow_split to S3. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S3. */ 
						S: case S4. M: case M2. M: case M2.
						exists Ai5 n1, mr1.
						TL: apply tyvar_list_weaken to _ TLa. /* GEN_BY_SCRIPT 
						TL: applys tyvar_list_weaken TLa. */ 
						I: apply inst_list_ty_L_mono to TL _ _ with m = mr1. /* GEN_BY_SCRIPT 
						I: applys inst_list_ty_L_mono TL with m = mr1. */ 
						search.
						M: case M2.
				
				SLI: apply subst_list_i_mono to M1 _ _. /* GEN_BY_SCRIPT 
				
				SLI: applys subst_list_i_mono M1. */ 
				Ind: apply 1 IH to _ _ _ Wa _ _ Wb2 _ _ _ _ SLI _ _ TySc1 with Ai = m2. /* GEN_BY_SCRIPT 
				Ind: applys 1 IH Wa Wb2 SLI TySc1 with Ai = m2. */ 
					TL: apply tyvar_list_weaken to _ TLa. /* GEN_BY_SCRIPT 
					TL: applys tyvar_list_weaken TLa. */ 
						apply inst_list_ty_L_mono to TL _ M1. /* GEN_BY_SCRIPT 
						applys inst_list_ty_L_mono M1 TL. */  search.
					% Main condition
						intros Tys SL SL.
						apply sty_inst_list_prune to Tys. /* GEN_BY_SCRIPT 
						applys sty_inst_list_prune Tys. */ 
						apply subst_list_ty_fresh_det to SL3. /* GEN_BY_SCRIPT 
						applys subst_list_ty_fresh_det SL3. */ 
						SL: apply subst_list_total to Tys with A = arrow (A1 n1) (B1 n1). /* GEN_BY_SCRIPT 
						SL: applys subst_list_total Tys with A = arrow (A1 n1) (B1 n1). */ 
						SL: apply subst_list_arrow_split to SL5. /* GEN_BY_SCRIPT 
						SL: applys subst_list_arrow_split SL5. */ 
						apply subst_list_det to *SL7 _. /* GEN_BY_SCRIPT 
						applys subst_list_det *SL7. */ 
						S: apply All to Tys _ _. /* GEN_BY_SCRIPT 
						S: applys All Tys. */ 
						M: apply inst_list_a_inL_isMono to _ S2. /* GEN_BY_SCRIPT 
						M: applys inst_list_a_inL_isMono S2. */ 
						I: apply inst_list_arrow_split to S3. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S3. */ 
						S: case S4. M: case M2. M: case M2.
						exists mr2, Bi5 n1.
						TL: apply tyvar_list_weaken to _ TLa. /* GEN_BY_SCRIPT 
						TL: applys tyvar_list_weaken TLa. */ 
						I: apply inst_list_ty_L_mono to TL _ _ with m = mr2. /* GEN_BY_SCRIPT 
						I: applys inst_list_ty_L_mono TL with m = mr2. */ 
						search.
						M: case M2.

				search.

				case TySc1.
				M: case A2.
			% B = forall
				I: apply inst_list_all_match to Ib. /* GEN_BY_SCRIPT 
			% B = forall
				I: applys inst_list_all_match Ib. */ 
				SL: apply subst_list_i_all_match to SLb. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_all_match SLb. */ 
				case S. case A2. case A2. case A2.
		% a \in E
			M: apply append_mem to ASL _. /* GEN_BY_SCRIPT 
		% a \in E
			M: applys append_mem ASL. */ 
			S: case S.
			% top
				apply subst_list_i_top_inv to SLb. /* GEN_BY_SCRIPT 
			% top
				applys subst_list_i_top_inv SLb. */ 
				apply inst_list_top_inv to Ib. /* GEN_BY_SCRIPT 
				applys inst_list_top_inv Ib. */ 
				search.
			% a
				apply subst_list_i_var_inv to SLb _. /* GEN_BY_SCRIPT 
			% a
				applys subst_list_i_var_inv SLb. */ 
				search.
			% ~a
				apply subst_list_i_var_inv to SLb _. /* GEN_BY_SCRIPT 
			% ~a
				applys subst_list_i_var_inv SLb. */ 
				search.
	% A = ~a
		A: apply *aux_A_sty to _ _. % Manual Fix [[applys _ _]]
		A: case A.
		% ~a \in L
			S: case S.
			% i <: i
				B: apply subst_list_i_i_inv to SLb. /* GEN_BY_SCRIPT 
			% i <: i
				B: applys subst_list_i_i_inv SLb. */  B: case B.
				% Bi = i
					B: apply inst_list_i_inv to Ib. /* GEN_BY_SCRIPT 
				% Bi = i
					B: applys inst_list_i_inv Ib. */  B: case B.
					% B = i
						STL: apply subst_list_i_is_styvar_list to SLa. /* GEN_BY_SCRIPT 
					% B = i
						STL: applys subst_list_i_is_styvar_list SLa. */ 
						Tys: apply sty_inst_list_exists_a to STL _ _ with T = top. /* GEN_BY_SCRIPT 
						Tys: applys sty_inst_list_exists_a STL with T = top. */ 
						SL: apply subst_list_sty to _ Tys1 _. /* GEN_BY_SCRIPT 
						SL: applys subst_list_sty Tys1. */ 
						SL: apply subst_list_wft to Tys _. /* GEN_BY_SCRIPT 
						SL: applys subst_list_wft Tys. */ 
						S: apply All to _ _ _. /* GEN_BY_SCRIPT 
						S: applys All. */ 
						apply inst_list_simple_type_det to _ S. /* GEN_BY_SCRIPT 
						applys inst_list_simple_type_det S. */ 
						apply inst_list_simple_type_det to _ S1. /* GEN_BY_SCRIPT 
						applys inst_list_simple_type_det S1. */ 
						case S2.
					case B.
					% B = b
						STL: apply subst_list_i_is_styvar_list to SLa. /* GEN_BY_SCRIPT 
					% B = b
						STL: applys subst_list_i_is_styvar_list SLa. */ 
						Tys: apply sty_inst_list_exists_a to STL _ _ with T = top, a = n1. /* GEN_BY_SCRIPT 
						Tys: applys sty_inst_list_exists_a STL with T = top, a = n1. */ 
						SL: apply subst_list_sty to _ Tys1 _. /* GEN_BY_SCRIPT 
						SL: applys subst_list_sty Tys1. */ 
						apply tyvar_list_prune_E_ty to TLb _. /* GEN_BY_SCRIPT 
						applys tyvar_list_prune_E_ty TLb. */  rename Er to SLE.
						apply append_prune to ASL. /* GEN_BY_SCRIPT 
						applys append_prune ASL. */  rename FA to SL'. rename FB to E.
						apply sty_inst_list_prune to Tys. /* GEN_BY_SCRIPT 
						applys sty_inst_list_prune Tys. */ 
						SL: apply subst_list_ty_fresh to Tys. /* GEN_BY_SCRIPT 
						SL: applys subst_list_ty_fresh Tys. */ 
						S: apply All to Tys _ _. /* GEN_BY_SCRIPT 
						S: applys All Tys. */ 
						apply inst_list_simple_type_det to _ S. /* GEN_BY_SCRIPT 
						applys inst_list_simple_type_det S. */ 
						M: apply inst_list_a_inL_isMono to _ S1. /* GEN_BY_SCRIPT 
						M: applys inst_list_a_inL_isMono S1. */ 
						case S2. case M.
					% false
						case A1. apply member_prune to B1. /* GEN_BY_SCRIPT  applys member_prune B1. */ 
				case B.
				% Bi = ~b
					apply tyvar_list_prune_L_sty to TLb _. /* GEN_BY_SCRIPT 
				% Bi = ~b
					applys tyvar_list_prune_L_sty TLb. */  backchain append_mem.
					STL: apply subst_list_i_is_styvar_list to SLa. /* GEN_BY_SCRIPT 
					STL: applys subst_list_i_is_styvar_list SLa. */ 
					Tys: apply sty_inst_list_exists_ab to STL _ _ _ _ with A = i, B = top. /* GEN_BY_SCRIPT 
					Tys: applys sty_inst_list_exists_ab STL with A = i, B = top. */ 
					SL: apply subst_list_sty to _ Tys1 _. /* GEN_BY_SCRIPT 
					SL: applys subst_list_sty Tys1. */ 
					SL: apply subst_list_sty to _ Tys2 _. /* GEN_BY_SCRIPT 
					SL: applys subst_list_sty Tys2. */ 
					apply sty_inst_list_prune_sty to Tys _. /* GEN_BY_SCRIPT 
					applys sty_inst_list_prune_sty Tys. */ 
					apply inst_list_var_inv to Ib _. /* GEN_BY_SCRIPT 
					applys inst_list_var_inv Ib. */ 

					S: apply All to _ _ _. /* GEN_BY_SCRIPT 

					S: applys All. */ 
					apply inst_list_simple_type_det to _ S. /* GEN_BY_SCRIPT 
					applys inst_list_simple_type_det S. */ 
					apply inst_list_simple_type_det to _ S1. /* GEN_BY_SCRIPT 
					applys inst_list_simple_type_det S1. */ 
					case S2.
				% Bi = ~a
					M: apply append_mem to ASL _. /* GEN_BY_SCRIPT 
				% Bi = ~a
					M: applys append_mem ASL. */  search.

			% B = top
				apply subst_list_i_top_inv to SLb. /* GEN_BY_SCRIPT 

			% B = top
				applys subst_list_i_top_inv SLb. */ 
				apply inst_list_top_inv to Ib. /* GEN_BY_SCRIPT 
				applys inst_list_top_inv Ib. */ 
				M: apply append_mem to ASL _. /* GEN_BY_SCRIPT 
				M: applys append_mem ASL. */ 
				search.

		% ~a \in E
			S: case S.
			% top
				apply subst_list_i_top_inv to SLb. /* GEN_BY_SCRIPT 
			% top
				applys subst_list_i_top_inv SLb. */ 
				apply inst_list_top_inv to Ib. /* GEN_BY_SCRIPT 
				applys inst_list_top_inv Ib. */ 
				M: apply append_mem to ASL _. /* GEN_BY_SCRIPT 
				M: applys append_mem ASL. */ 
				search.
			% false
				apply wfj_tyvar_styvar to _ S _. /* GEN_BY_SCRIPT 
			% false
				applys wfj_tyvar_styvar S. */ 
			% B = ~a
				apply subst_list_i_var_inv to SLb _. /* GEN_BY_SCRIPT 
			% B = ~a
				applys subst_list_i_var_inv SLb. */ 
				M: apply append_mem to ASL _. /* GEN_BY_SCRIPT 
				M: applys append_mem ASL. */ 
				search.
	% A = ->
		clear aux_A_ty aux_A_sty.
		I: apply inst_list_arrow_split to Ia. /* GEN_BY_SCRIPT 
		I: applys inst_list_arrow_split Ia. */ 
		SL: apply subst_list_i_arrow_split to SLa. /* GEN_BY_SCRIPT 
		SL: applys subst_list_i_arrow_split SLa. */ 
		S: case S.
		% B = top
			apply subst_list_i_top_inv to SLb. /* GEN_BY_SCRIPT 
		% B = top
			applys subst_list_i_top_inv SLb. */ 
			apply inst_list_top_inv to Ib. /* GEN_BY_SCRIPT 
			applys inst_list_top_inv Ib. */ 
			SL: apply subst_list_i_is_styvar_list to _. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_is_styvar_list. */ 
			W: apply styvar_list_wfj to _ _ _. /* GEN_BY_SCRIPT 
			W: applys styvar_list_wfj. */  W: apply tyvar_list_wfj to TLa _ _. /* GEN_BY_SCRIPT  W: applys tyvar_list_wfj TLa. */ 
			W: apply inst_list_wft_f to _ _ _ _ _ _ _. /* GEN_BY_SCRIPT 
			W: applys inst_list_wft_f. */ 
			search.
		% Bs = ->
			SL: apply subst_list_i_arrow_inv to SLb. /* GEN_BY_SCRIPT 
		% Bs = ->
			SL: applys subst_list_i_arrow_inv SLb. */ 
			I: apply inst_list_arrow_inv to Ib. /* GEN_BY_SCRIPT 
			I: applys inst_list_arrow_inv Ib. */ 
			I: case I2.
			% B = b (inst)
				case I2.
				clear aux_B_ty aux_B_sty.
				apply tyvar_list_prune_E_ty to _ _. /* GEN_BY_SCRIPT 
				applys tyvar_list_prune_E_ty. */  rename Er to SLE.
				apply append_prune to ASL. /* GEN_BY_SCRIPT 
				applys append_prune ASL. */  rename FA to SL'. rename FB to E.
				M: apply inst_list_a_inL_isMono to _ Ib. /* GEN_BY_SCRIPT 
				M: applys inst_list_a_inL_isMono Ib. */ 
				SL: apply subst_list_i_is_styvar_list to SLa. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_is_styvar_list SLa. */ 
				M: case M.
				apply subst_list_i_mono_det to _ SL2. /* GEN_BY_SCRIPT 
				applys subst_list_i_mono_det SL2. */ 
				apply subst_list_i_mono_det to _ SL3. /* GEN_BY_SCRIPT 
				applys subst_list_i_mono_det SL3. */ 

				TySc: case TyScheme. % Manual Fix try solve case TySc.

				Ind: apply 1 IH to ASL _ TLb Wb _ TLa Wa1 _ _ _ I _ SL _ TySc with Ai = mr1. /* GEN_BY_SCRIPT 

				Ind: applys 1 IH ASL TLb TLa Wb Wa1 TySc _ I _ SL with Ai = mr1. */ 
					TL: apply tyvar_list_weaken to _ TLb. /* GEN_BY_SCRIPT 
					TL: applys tyvar_list_weaken TLb. */ 
						apply inst_list_ty_L_mono to TL _ M. /* GEN_BY_SCRIPT 
						applys inst_list_ty_L_mono M TL. */  search.
					% Main condition
						intros Tys SL SL.
						apply sty_inst_list_prune to Tys. /* GEN_BY_SCRIPT 
						applys sty_inst_list_prune Tys. */ 
						apply subst_list_ty_fresh_det to SL5. /* GEN_BY_SCRIPT 
						applys subst_list_ty_fresh_det SL5. */ 
						SL: apply subst_list_total to Tys with A = arrow (A1 n1) (B1 n1). /* GEN_BY_SCRIPT 
						SL: applys subst_list_total Tys with A = arrow (A1 n1) (B1 n1). */ 
						SL: apply subst_list_arrow_split to SL7. /* GEN_BY_SCRIPT 
						SL: applys subst_list_arrow_split SL7. */ 
						apply subst_list_det to *SL8 _. /* GEN_BY_SCRIPT 
						applys subst_list_det *SL8. */ 
						S: apply All to Tys _ _. /* GEN_BY_SCRIPT 
						S: applys All Tys. */ 
						M: apply inst_list_a_inL_isMono to _ S3. /* GEN_BY_SCRIPT 
						M: applys inst_list_a_inL_isMono S3. */ 
						I: apply inst_list_arrow_split to S2. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S2. */ 
						S: case S4. M: case M2. M: case M2.
						exists mr4, Ai5 n1.
						TL: apply tyvar_list_weaken to _ TLb. /* GEN_BY_SCRIPT 
						TL: applys tyvar_list_weaken TLb. */ 
						I: apply inst_list_ty_L_mono to TL _ _ with m = mr4. /* GEN_BY_SCRIPT 
						I: applys inst_list_ty_L_mono TL with m = mr4. */ 
						search.

				Ind: apply 1 IH to ASL _ TLa Wa2 _ TLb Wb _ _ _ _ _ SL3 _ TySc1 with Bi = mr2. /* GEN_BY_SCRIPT 

				Ind: applys 1 IH ASL TLa TLb Wa2 Wb TySc1 _ SL3 with Bi = mr2. */ 
					TL: apply tyvar_list_weaken to _ TLb. /* GEN_BY_SCRIPT 
					TL: applys tyvar_list_weaken TLb. */ 
						apply inst_list_ty_L_mono to TL _ M1. /* GEN_BY_SCRIPT 
						applys inst_list_ty_L_mono M1 TL. */  search.
					% Main condition
						intros Tys SL SL.
						apply sty_inst_list_prune to Tys. /* GEN_BY_SCRIPT 
						applys sty_inst_list_prune Tys. */ 
						apply subst_list_ty_fresh_det to SL6. /* GEN_BY_SCRIPT 
						applys subst_list_ty_fresh_det SL6. */ 
						SL: apply subst_list_total to Tys with A = arrow (A1 n1) (B1 n1). /* GEN_BY_SCRIPT 
						SL: applys subst_list_total Tys with A = arrow (A1 n1) (B1 n1). */ 
						SL: apply subst_list_arrow_split to SL7. /* GEN_BY_SCRIPT 
						SL: applys subst_list_arrow_split SL7. */ 
						apply subst_list_det to *SL9 _. /* GEN_BY_SCRIPT 
						applys subst_list_det *SL9. */ 
						S: apply All to Tys _ _. /* GEN_BY_SCRIPT 
						S: applys All Tys. */ 
						M: apply inst_list_a_inL_isMono to _ S3. /* GEN_BY_SCRIPT 
						M: applys inst_list_a_inL_isMono S3. */ 
						I: apply inst_list_arrow_split to S2. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S2. */ 
						S: case S4. M: case M2.  M: case M2.
						exists Bi5 n1, mr5.
						TL: apply tyvar_list_weaken to _ TLb. /* GEN_BY_SCRIPT 
						TL: applys tyvar_list_weaken TLb. */ 
						I: apply inst_list_ty_L_mono to TL _ _ with m = mr5. /* GEN_BY_SCRIPT 
						I: applys inst_list_ty_L_mono TL with m = mr5. */ 
						search.

				search.

			case TySc.

			% B = ->
				Wb: case Wb.
				clear aux_B_ty aux_B_sty.

				TySc: case TyScheme. % Manual Fix try solve case TySc1; try solve case TySc2.

				Ind: apply 1 IH to ASL _ TLb Wb _ TLa Wa1 _ _ _ _ _ _ _ TySc. /* GEN_BY_SCRIPT 

				Ind: applys 1 IH ASL TLb TLa Wb Wa1 TySc. */ 
					intros Tys SL SL.
					SL: apply subst_list_total to Tys with A = B1. /* GEN_BY_SCRIPT 
					SL: applys subst_list_total Tys with A = B1. */ 
					SL: apply subst_list_total to Tys with A = A5. /* GEN_BY_SCRIPT 
					SL: applys subst_list_total Tys with A = A5. */ 
					SL: apply subst_list_arrow_combine to _ SL5 SL6. /* GEN_BY_SCRIPT 
					SL: applys subst_list_arrow_combine SL5 SL6. */ 
					SL: apply subst_list_arrow_combine to _ SL4 SL7. /* GEN_BY_SCRIPT 
					SL: applys subst_list_arrow_combine SL4 SL7. */ 

					S: apply All to Tys SL8 SL9. /* GEN_BY_SCRIPT 

					S: applys All Tys SL8 SL9. */ 
						I: apply inst_list_arrow_split to S2. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S2. */ 
						I: apply inst_list_arrow_split to S3. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S3. */ 
						case S4.
						search.

				Ind: apply 1 IH to ASL _ TLa Wa2 _ TLb Wb1 _ _ I1 I3 SL1 SL3 _ TySc1. /* GEN_BY_SCRIPT 

				Ind: applys 1 IH ASL TLa TLb Wa2 Wb1 I1 I3 SL1 SL3 TySc1. */ 
					intros Tys SL SL.
					SL: apply subst_list_total to Tys with A = A1. /* GEN_BY_SCRIPT 
					SL: applys subst_list_total Tys with A = A1. */ 
					SL: apply subst_list_total to Tys with A = A4. /* GEN_BY_SCRIPT 
					SL: applys subst_list_total Tys with A = A4. */ 
					SL: apply subst_list_arrow_combine to _ SL6 SL4. /* GEN_BY_SCRIPT 
					SL: applys subst_list_arrow_combine SL6 SL4. */ 
					SL: apply subst_list_arrow_combine to _ SL7 SL5. /* GEN_BY_SCRIPT 
					SL: applys subst_list_arrow_combine SL7 SL5. */ 

					S: apply All to Tys SL8 SL9. /* GEN_BY_SCRIPT 

					S: applys All Tys SL8 SL9. */ 
						I: apply inst_list_arrow_split to S2. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S2. */ 
						I: apply inst_list_arrow_split to S3. /* GEN_BY_SCRIPT 
						I: applys inst_list_arrow_split S3. */ 
						case S4.
						search.

				search.

				case TySc2. case TySc2. case TySc1.

	% A = forall
		clear aux_A_ty aux_A_sty.
		I: apply inst_list_all_match to Ia. /* GEN_BY_SCRIPT 
		I: applys inst_list_all_match Ia. */ 
		SL: apply subst_list_i_all_match to SLa. /* GEN_BY_SCRIPT 
		SL: applys subst_list_i_all_match SLa. */ 

		B_neq_forall: assert notAll_ Bi -> (name Bi -> member (styvar Bi) SL -> false) -> sub SLE (all ai) Bi.
			intros NotAll Not~a.
			S: case S.
			% top
				SL: apply subst_list_i_is_styvar_list to _. /* GEN_BY_SCRIPT 
			% top
				SL: applys subst_list_i_is_styvar_list. */ 
				W: apply styvar_list_wfj to _ _ _. /* GEN_BY_SCRIPT 
				W: applys styvar_list_wfj. */  W: apply tyvar_list_wfj to TLa _ _. /* GEN_BY_SCRIPT  W: applys tyvar_list_wfj TLa. */ 
				W: apply inst_list_wft_f to _ _ _ _ _ _ _. /* GEN_BY_SCRIPT 
				W: applys inst_list_wft_f. */ 
				apply subst_list_i_top_inv to _. /* GEN_BY_SCRIPT 
				applys subst_list_i_top_inv. */ 
				search.
			% inst
				I: apply inst_list_ty_inst to I S1. /* GEN_BY_SCRIPT 
			% inst
				I: applys inst_list_ty_inst I S1. */ 
				Aa: assert append (tyvar n1 :: La) SLE (tyvar n1 :: LaE).
				SL: apply subst_list_i_ty_inst_mono to SL S1. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_ty_inst_mono SL S1. */ 

				TySc: case TyScheme (keep). % Manual Fix
					apply inst_list_all_match to Ib. apply notAll_false to NotAll.


				Ind: apply 1 IH to ASL Aa1 _ _ Ab _ _ _ _ I1 Ib _ _ _ TySc. /* GEN_BY_SCRIPT 

				Ind: applys 1 IH ASL Aa1 I1 Ab Ib TySc. */ 
					intros Tys SL SL. apply sty_inst_list_prune to Tys. /* GEN_BY_SCRIPT  applys sty_inst_list_prune Tys. */ 
					SL: apply subst_list_total to Tys with A = all A1. /* GEN_BY_SCRIPT 
					SL: applys subst_list_total Tys with A = all A1. */ 
					SL: apply subst_list_all_match to SL4. /* GEN_BY_SCRIPT 
					SL: applys subst_list_all_match SL4. */ 
					apply subst_list_det to *SL5 _. /* GEN_BY_SCRIPT 
					applys subst_list_det *SL5. */ 
					S: apply All to Tys SL4 SL3. /* GEN_BY_SCRIPT 
					S: applys All Tys SL4 SL3. */ 
					apply inst_list_prune_Ai to S5. /* GEN_BY_SCRIPT 
					applys inst_list_prune_Ai S5. */ 
					I: apply inst_list_all_match to S4. /* GEN_BY_SCRIPT 
					I: applys inst_list_all_match S4. */ 
					S: case S6 (keep).
					% top
						W: case S7.
							exists ai3 n2 i, top.
								I: apply inst_list_ty_inst to I2 _ with m = i, a = n2. /* GEN_BY_SCRIPT 
								I: applys inst_list_ty_inst I2 with m = i, a = n2. */ 
								split. search. search.
								W: apply sub_wft to S6. /* GEN_BY_SCRIPT 
								W: applys sub_wft S6. */ 
								W: apply wft_open to _ _ _ with A = ai3 n2, B = i. /* GEN_BY_SCRIPT 
								W: applys wft_open with A = ai3 n2, B = i. */ 
								search.
					% inst
						apply mono_prune to S8. /* GEN_BY_SCRIPT 
					% inst
						applys mono_prune S8. */ 
						exists ai3 n2 m2, Ar n2.
						I: apply inst_list_ty_inst to I2 S8 with a = n2. /* GEN_BY_SCRIPT 
						I: applys inst_list_ty_inst I2 S8 with a = n2. */ 
						apply subst_list_prune_R to SL3. /* GEN_BY_SCRIPT 
						applys subst_list_prune_R SL3. */ 
						search.
					% forall
						I: apply inst_list_all_match_inv to S5. /* GEN_BY_SCRIPT 
					% forall
						I: applys inst_list_all_match_inv S5. */ 
						SL: apply subst_list_all_match_inv to _ SL3. /* GEN_BY_SCRIPT 
						SL: applys subst_list_all_match_inv SL3. */ 
						SL: case SL5.
							case SL5.
								apply tyvar_list_prune_L_sty to TLb _. /* GEN_BY_SCRIPT 
								applys tyvar_list_prune_L_sty TLb. */  backchain append_mem.
								apply inst_list_ty_det to Ib. /* GEN_BY_SCRIPT 
								applys inst_list_ty_det Ib. */ 
								apply Not~a to _ _. /* GEN_BY_SCRIPT 
								applys Not~a. */ 
							apply inst_list_all_match to Ib. /* GEN_BY_SCRIPT 
							applys inst_list_all_match Ib. */ 
								apply notAll_false to NotAll. /* GEN_BY_SCRIPT 
								applys notAll_false NotAll. */ 

				M: apply mono_weaken_f to _ S1. /* GEN_BY_SCRIPT 

				M: applys mono_weaken_f S1. */ 
				FV: assert inFV ai.
					SL: apply subst_list_i_is_styvar_list to _. /* GEN_BY_SCRIPT 
					SL: applys subst_list_i_is_styvar_list. */ 
					W: apply styvar_list_wfj to _ _ _. /* GEN_BY_SCRIPT 
					W: applys styvar_list_wfj. */  W: apply tyvar_list_wfj to TLa _ _. /* GEN_BY_SCRIPT  W: applys tyvar_list_wfj TLa. */ 
					W: apply inst_list_wft_f to _ _ _ _ _ _ _. /* GEN_BY_SCRIPT 
					W: applys inst_list_wft_f. */  W: case W2. search.
				search.


				apply notAll_false to TySc1.
				case TySc2.
				case TySc.


			% forall
				I: apply subst_list_i_all_match_inv to SLb. /* GEN_BY_SCRIPT 
			% forall
				I: applys subst_list_i_all_match_inv SLb. */ 
				apply notAll_false to NotAll. /* GEN_BY_SCRIPT 
				applys notAll_false NotAll. */ 
		Wb: case Wb (keep). % Manual Fix
			apply inst_list_simple_type_det to _ Ib. backchain B_neq_forall. intros h. case h.
			apply inst_list_simple_type_det to _ Ib. backchain B_neq_forall. intros h. case h.
			apply inst_list_simple_type_det to _ Ib. backchain B_neq_forall. intros h. case h.

		% B = b
			B: apply *aux_B_ty to _ _.
			B: case B.
				% B \in L
					case B1. rename L to SLE.
					apply append_prune to ASL. /* GEN_BY_SCRIPT 
					applys append_prune ASL. */  rename FA to SL'. rename FB to E.
					apply mono_prune to B2. /* GEN_BY_SCRIPT 
					applys mono_prune B2. */ 
					backchain B_neq_forall.
						case B2. search. search. search.
						intros h M. M: case B2. case h. case h.
							apply subst_list_i_prune_sty_E to SLa _. /* GEN_BY_SCRIPT 
							applys subst_list_i_prune_sty_E SLa. */  apply member_prune to M1. /* GEN_BY_SCRIPT  applys member_prune M1. */ 
							case h.
				% B \in E
					backchain B_neq_forall.
						intros h M. apply subst_list_i_prune_sty_E to SLa _. /* GEN_BY_SCRIPT  applys subst_list_i_prune_sty_E SLa. */  apply member_prune to B. /* GEN_BY_SCRIPT  applys member_prune B. */ 
		% B = ~b
			B: apply *aux_B_sty to _ _.
			B: case B.
			% ~b \in SL
				STL: apply subst_list_i_is_styvar_list to SLa. /* GEN_BY_SCRIPT 
			% ~b \in SL
				STL: applys subst_list_i_is_styvar_list SLa. */ 
				Tys: apply sty_inst_list_exists_a to STL _ _ with T = bot. /* GEN_BY_SCRIPT 
				Tys: applys sty_inst_list_exists_a STL with T = bot. */ 
				permute (n1 n2) Tys. permute (n1 n2) Tys1.
				SL: apply subst_list_sty to _ Tys1 _. /* GEN_BY_SCRIPT 
				SL: applys subst_list_sty Tys1. */ 
				SL: apply subst_list_total to Tys with A = (all (A1 n2)). /* GEN_BY_SCRIPT 
				SL: applys subst_list_total Tys with A = (all (A1 n2)). */ 
				apply subst_list_prune_sty_R to Tys _ SL2. /* GEN_BY_SCRIPT 
				applys subst_list_prune_sty_R Tys SL2. */  rename E1 to E.
				SL: apply subst_list_all_match to SL2. /* GEN_BY_SCRIPT 
				SL: applys subst_list_all_match SL2. */ 
				S: apply All to _ SL2 SL1. /* GEN_BY_SCRIPT 
				S: applys All SL2 SL1. */ 
					I: apply inst_list_all_match to S1. /* GEN_BY_SCRIPT 
					I: applys inst_list_all_match S1. */  I: apply inst_list_bot_det to S2. /* GEN_BY_SCRIPT  I: applys inst_list_bot_det S2. */ 
					apply sub_all_bot_false to S3. /* GEN_BY_SCRIPT 
					applys sub_all_bot_false S3. */ 
			% ~b \in E
				backchain B_neq_forall.
					intros h M. case B1. apply member_prune to M. /* GEN_BY_SCRIPT  applys member_prune M. */ 
		% B = ->
			apply inst_list_arrow_split to Ib. /* GEN_BY_SCRIPT 
		% B = ->
			applys inst_list_arrow_split Ib. */  backchain B_neq_forall.
			intros h M. case h.
		% B = forall
			clear aux_B_ty aux_B_sty.
			I: apply inst_list_all_match to Ib. /* GEN_BY_SCRIPT 
			I: applys inst_list_all_match Ib. */ 
			SL: apply subst_list_i_all_match to SLb. /* GEN_BY_SCRIPT 
			SL: applys subst_list_i_all_match SLb. */ 
			Wa: apply wft_ty_sty to _ _ *Wa1. /* GEN_BY_SCRIPT 
			Wa: applys wft_ty_sty *Wa1. */  Wb: apply wft_ty_sty to _ _ *Wb1. /* GEN_BY_SCRIPT  Wb: applys wft_ty_sty *Wb1. */ 
			ASL: assert append (styvar n1 :: SL) E (styvar n1 :: SLE).
			Aa: apply append_total_E to Aa with B = styvar n1 :: SLE. /* GEN_BY_SCRIPT 
			Aa: applys append_total_E Aa with B = styvar n1 :: SLE. */  rename C to LaE'.
			Ab: apply append_total_E to Ab with B = styvar n1 :: SLE. /* GEN_BY_SCRIPT 
			Ab: applys append_total_E Ab with B = styvar n1 :: SLE. */  rename C to LbE'.
			Wa: apply wft_sty_move_back to _ _ Wa1 with F = La. /* GEN_BY_SCRIPT 
			Wa: applys wft_sty_move_back Wa1 with F = La. */ 
			Wb: apply wft_sty_move_back to _ _ Wb1 with F = Lb. /* GEN_BY_SCRIPT 
			Wb: applys wft_sty_move_back Wb1 with F = Lb. */ 

			TySc: case TyScheme. % Manual Fix

			S: case S. apply notAll_false to S2. /* GEN_BY_SCRIPT  applys notAll_false S2. */ 
			SLI: apply subst_list_i_sty_i to SL. /* GEN_BY_SCRIPT 
			SLI: applys subst_list_i_sty_i SL. */ 
			SLI: apply subst_list_i_sty_i to SL1. /* GEN_BY_SCRIPT 
			SLI: applys subst_list_i_sty_i SL1. */ 
			TLa: apply tyvar_list_add_sty to TLa. /* GEN_BY_SCRIPT 
			TLa: applys tyvar_list_add_sty TLa. */ 
			TLb: apply tyvar_list_add_sty to TLb. /* GEN_BY_SCRIPT 
			TLb: applys tyvar_list_add_sty TLb. */ 
			S: apply sub_subst to S. /* GEN_BY_SCRIPT 
			S: applys sub_subst S. */  S: apply sub_strenthen_styvar to _ _ *S3. /* GEN_BY_SCRIPT  S: applys sub_strenthen_styvar *S3. */ 
			Ind: apply 1 IH to _ _ TLa1 Wa3 _ TLb1 Wb3 _ _ I I1 SLI SLI1 _ TySc. /* GEN_BY_SCRIPT 
			Ind: applys 1 IH Wa3 Wb3 I I1 SLI SLI1 TLa1 TLb1. */ 
				intros Tys SL SL.
				Tys: case Tys.
				SL: case SL2. SL: case SL3.
				SL: apply subst_list_subst_all_inv to _ SL2 _ with A = A1. /* GEN_BY_SCRIPT 
				SL: applys subst_list_subst_all_inv SL2 with A = A1. */ 
				SL: apply subst_list_subst_all_inv to _ SL3 _ with A = A2. /* GEN_BY_SCRIPT 
				SL: applys subst_list_subst_all_inv SL3 with A = A2. */ 
				S: apply All to Tys1 _ _. /* GEN_BY_SCRIPT 
				S: applys All Tys1. */ 
				I: apply inst_list_all_match to S4. /* GEN_BY_SCRIPT 
				I: applys inst_list_all_match S4. */ 
				I: apply inst_list_all_match to S5. /* GEN_BY_SCRIPT 
				I: applys inst_list_all_match S5. */ 
				I: apply inst_list_ty_inst_wft to I2 Tys. /* GEN_BY_SCRIPT 
				I: applys inst_list_ty_inst_wft I2 Tys. */ 
				I: apply inst_list_ty_inst_wft to I3 Tys. /* GEN_BY_SCRIPT 
				I: applys inst_list_ty_inst_wft I3 Tys. */ 
				S: case S6. apply notAll_false to S8. /* GEN_BY_SCRIPT  applys notAll_false S8. */ 
				W: apply wft_weaken_sty to Tys. /* GEN_BY_SCRIPT 
				W: applys wft_weaken_sty Tys. */ 
				S: apply sub_subst_wft to W S6 _ _. /* GEN_BY_SCRIPT 
				S: applys sub_subst_wft W S6. */ 
				S: apply sub_strenthen_styvar to _ _ S9. /* GEN_BY_SCRIPT 
				S: applys sub_strenthen_styvar S9. */ 
				search.

			% FV
			FV: assert inFV ai /\ inFV ai2.
				SL: apply subst_list_i_is_styvar_list to _. /* GEN_BY_SCRIPT 
				SL: applys subst_list_i_is_styvar_list. */ 
				W: apply styvar_list_wfj to _ _ _. /* GEN_BY_SCRIPT 
				W: applys styvar_list_wfj. */ 
				W: apply tyvar_list_wfj to TLa _ _. /* GEN_BY_SCRIPT 
				W: applys tyvar_list_wfj TLa. */  W: apply inst_list_wft_f to Ia _ _ _ _ _ _. /* GEN_BY_SCRIPT  W: applys inst_list_wft_f Ia. */  W: case W2.
				W: apply tyvar_list_wfj to TLb _ _. /* GEN_BY_SCRIPT 
				W: applys tyvar_list_wfj TLb. */  W: apply inst_list_wft_f to Ib _ _ _ _ _ _. /* GEN_BY_SCRIPT  W: applys inst_list_wft_f Ib. */  W: case W5.
				search.
			FV: case FV.
			search.

		apply notAll_false to TySc1.
		apply notAll_false to TySc1.
		case TySc.



Theorem wft_ty_scheme_2 : forall E F A B,
	wft E A -> wft F B -> ty_scheme_2 A B /\ ty_scheme_2 B A.
induction on 1. induction on 2. intros Wa Wb. split.
	Wa: case Wa (keep). % Manual Fix
		Wb: case Wb. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.

	% A = ->
		apply IH to Wa1 Wb. /* GEN_BY_SCRIPT 
	% A = ->
		applys IH Wa1 Wb. */  apply IH to Wa2 Wb. /* GEN_BY_SCRIPT  applys IH Wa2 Wb. */ 
		Wb: case Wb. % Manual Fix try search.
		search. search. search. search. search.
		% B = ->
			apply IH1 to Wa1 Wb. /* GEN_BY_SCRIPT 
		% B = ->
			applys IH1 Wa1 Wb. */  apply IH1 to Wa2 Wb1. /* GEN_BY_SCRIPT  applys IH1 Wa2 Wb1. */  search.
		% B = forall
			apply IH1 to Wa Wb. /* GEN_BY_SCRIPT 
		% B = forall
			applys IH1 Wa Wb. */  search.
	% A = forall
		apply IH to Wa1 Wb. /* GEN_BY_SCRIPT 
	% A = forall
		applys IH Wa1 Wb. */ 
		Wb: case Wb. % Manual Fix try search.
		search. search. search. search. search. search.
		% B = forall
			apply IH1 to Wa1 Wb. /* GEN_BY_SCRIPT 
		% B = forall
			applys IH1 Wa1 Wb. */  search.
	Wa: case Wa (keep). % Manual Fix
		Wb: case Wb. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.
		Wb: case Wb. search. search. search. search. search. search. search. apply IH1 to Wa Wb. apply IH1 to Wa Wb1. search. apply IH1 to Wa Wb. search.

	% A = ->
		apply IH to Wa1 Wb. /* GEN_BY_SCRIPT 
	% A = ->
		applys IH Wa1 Wb. */  apply IH to Wa2 Wb. /* GEN_BY_SCRIPT  applys IH Wa2 Wb. */ 
		Wb: case Wb. % Manual Fix try search.
		search. search. search. search. search.
		% B = ->
			apply IH1 to Wa1 Wb. /* GEN_BY_SCRIPT 
		% B = ->
			applys IH1 Wa1 Wb. */  apply IH1 to Wa2 Wb1. /* GEN_BY_SCRIPT  applys IH1 Wa2 Wb1. */  search.
		% B = forall
			apply IH1 to Wa Wb. /* GEN_BY_SCRIPT 
		% B = forall
			applys IH1 Wa Wb. */  search.
	% A = forall
		apply IH to Wa1 Wb. /* GEN_BY_SCRIPT 
	% A = forall
		applys IH Wa1 Wb. */ 
		Wb: case Wb. % Manual Fix try search.
		search. search. search. search. search. search.
		% B = forall
			apply IH1 to Wa1 Wb. /* GEN_BY_SCRIPT 
		% B = forall
			applys IH1 Wa1 Wb. */  search.


Theorem sub_any_inst_implys_forall : forall A B E,
	wft E (all A) -> wft E (all B) -> wfj E ->
	(forall C, wft E C -> sub E (A C) (B C)) -> sub E (all A) (all B).
intros W W E All.
	W: case W. W: case W1.
	W: apply wft_ty_sty to _ _ W. /* GEN_BY_SCRIPT 
	W: applys wft_ty_sty W. */  W: apply wft_ty_sty to _ _ W1. /* GEN_BY_SCRIPT  W: applys wft_ty_sty W1. */ 
	S: apply All to _ with C = i. /* GEN_BY_SCRIPT 
	S: applys All with C = i. */ 
	S: apply sub_C_sty to _ _ _ W4 _ _ W5 _ _ _ _ _ _ _ _ with La = nil, Lb = nil, SL = styvar n1 :: nil, E = E, Asi = A i, Bsi = B i. /* GEN_BY_SCRIPT 
	S: applys sub_C_sty W4 W5 with La = nil, Lb = nil, SL = styvar n1 :: nil, E = E, Asi = A i, Bsi = B i. */ 
		apply wft_ty_scheme_2 to W4 W5. /* GEN_BY_SCRIPT 
		applys wft_ty_scheme_2 W4 W5. */  search.
		search. search.
		intros W SL SL. exists As n1, Bs n1.
			split. search. search.
			Tys: case W6. case Tys1.
			SL: case SL. SL: case SL.
			SL: case SL1. SL: case SL.
			S: apply All to _ with C = A1. /* GEN_BY_SCRIPT 
			S: applys All with C = A1. */ 
			search.
	search.



Theorem sub_complete_wrt_stable : forall E A B,
	wft E A -> wft E B -> wfj E ->
	sub_stable E A B -> sub E A B.
induction on 4. intros W W E S. S: case S (keep). % Manual Fix try search.
	backchain sub_refl.
	search. search.
	W: case W. W: case W1.
		S: apply IH to _ _ _ S1. /* GEN_BY_SCRIPT 
		S: applys IH S1. */  S: apply IH to _ _ _ S2. /* GEN_BY_SCRIPT  S: applys IH S2. */  search.
	W: case W.
		W: apply wft_inst_mono to _ _. /* GEN_BY_SCRIPT 
		W: applys wft_inst_mono. */ 
		S: apply IH to _ _ _ S1. /* GEN_BY_SCRIPT 
		S: applys IH. */ 
		search.
	% all
		S: apply sub_any_inst_implys_forall to W W1 _ _. /* GEN_BY_SCRIPT 
	% all
		S: applys sub_any_inst_implys_forall W W1. */ 
			intros W.
			S: apply S1 to W2. /* GEN_BY_SCRIPT 
			S: applys S1 W2. */ 
			W: apply wft_inst to W W2. /* GEN_BY_SCRIPT 
			W: applys wft_inst W W2. */  W: apply wft_inst to W1 W2. /* GEN_BY_SCRIPT  W: applys wft_inst W1 W2. */ 
			S: apply IH to _ _ _ S2. /* GEN_BY_SCRIPT 
			S: applys IH. */  search.
		search.







Theorem sub_B_sty_inv : forall E A, nabla a,
	wfj (E a) -> sub (E a) (A a) a -> member (styvar a) (E a) -> A = z\ z \/ A = z\ bot.
induction on 2. intros. case H2. % Manual Fix try search.
search. search. search.
	apply IH to _ H4 _. /* GEN_BY_SCRIPT 
	applys IH. */  apply mono_prune_styvar to _ _ H5. /* GEN_BY_SCRIPT  applys mono_prune_styvar H5. */  case H8.
		case H9. apply inFV_false to H7. /* GEN_BY_SCRIPT  applys inFV_false H7. */ 
		case H9. apply inFV_false to H7. /* GEN_BY_SCRIPT  applys inFV_false H7. */  case H5.


Theorem sub_sound_wrt_stable_trans : forall SL SLE E Tys A B As Bs,
	append SL E SLE -> wfj E ->
	sty_inst_list SL E Tys ->
	subst_list Tys A As -> subst_list Tys B Bs ->
	sub SLE A B -> sub_stable E As Bs.
induction on 6. intros A E Tys SLa SLb S. S: case S (keep).
% i <: i
	apply subst_list_wft_det to _ _ SLa. /* GEN_BY_SCRIPT 
% i <: i
	applys subst_list_wft_det SLa. */ 
	apply subst_list_wft_det to _ _ SLb. /* GEN_BY_SCRIPT 
	applys subst_list_wft_det SLb. */ 
	search.
% A <: top
	apply subst_list_wft_det to _ _ SLb. /* GEN_BY_SCRIPT 
% A <: top
	applys subst_list_wft_det SLb. */ 
	W: apply subst_list_SLE_wft to _ _ _ _ SLa. /* GEN_BY_SCRIPT 
	W: applys subst_list_SLE_wft SLa. */ 
	search.
% bot <: B
	apply subst_list_wft_det to _ _ SLa. /* GEN_BY_SCRIPT 
% bot <: B
	applys subst_list_wft_det SLa. */ 
	W: apply subst_list_SLE_wft to _ _ _ _ SLb. /* GEN_BY_SCRIPT 
	W: applys subst_list_SLE_wft SLb. */ 
	search.
% a <: a
	M: apply append_mem_inv to A _. /* GEN_BY_SCRIPT 
% a <: a
	M: applys append_mem_inv A. */  M: case M.
	% false
		SL: apply subst_list_is_styvar_list to _ SLa. /* GEN_BY_SCRIPT 
	% false
		SL: applys subst_list_is_styvar_list SLa. */ 
		apply styvar_list_ty_false to _ M. /* GEN_BY_SCRIPT 
		applys styvar_list_ty_false M. */ 
	% a \in E
		apply subst_list_wft_det to Tys _ SLa. /* GEN_BY_SCRIPT 
	% a \in E
		applys subst_list_wft_det Tys SLa. */ 
		apply subst_list_wft_det to Tys _ SLb. /* GEN_BY_SCRIPT 
		applys subst_list_wft_det Tys SLb. */ 
		search.
% ~a <: ~a
	M: apply append_mem_inv to A _. /* GEN_BY_SCRIPT 
% ~a <: ~a
	M: applys append_mem_inv A. */  M: case M.
	% ~a \in SL
		Tys: apply sty_inst_list_exists_T to _ M. /* GEN_BY_SCRIPT 
	% ~a \in SL
		Tys: applys sty_inst_list_exists_T M. */ 
		apply subst_list_sty_det_mem to Tys _ SLa. /* GEN_BY_SCRIPT 
		applys subst_list_sty_det_mem Tys SLa. */ 
		apply subst_list_sty_det_mem to Tys _ SLb. /* GEN_BY_SCRIPT 
		applys subst_list_sty_det_mem Tys SLb. */ 
		search.
	% ~a \in E   false
		apply sty_inst_list_prune_sty_SL to Tys _. /* GEN_BY_SCRIPT 
	% ~a \in E   false
		applys sty_inst_list_prune_sty_SL Tys. */ 
		apply subst_list_sty_E_id to Tys _ SLa. /* GEN_BY_SCRIPT 
		applys subst_list_sty_E_id Tys SLa. */ 
		apply subst_list_sty_E_id to Tys _ SLb. /* GEN_BY_SCRIPT 
		applys subst_list_sty_E_id Tys SLb. */ 
		search.
% -> <: ->
	SLa: apply subst_list_arrow_split to SLa. /* GEN_BY_SCRIPT 
% -> <: ->
	SLa: applys subst_list_arrow_split SLa. */ 
	SLb: apply subst_list_arrow_split to SLb. /* GEN_BY_SCRIPT 
	SLb: applys subst_list_arrow_split SLb. */ 
	S: apply IH to _ _ _ _ _ S1. /* GEN_BY_SCRIPT 
	S: applys IH S1. */  S: apply IH to _ _ _ _ _ S2. /* GEN_BY_SCRIPT  S: applys IH S2. */ 
	search.
% \forall a. A <: B
	SL: apply subst_list_all_match to SLa. /* GEN_BY_SCRIPT 
% \forall a. A <: B
	SL: applys subst_list_all_match SLa. */ 
	W: apply sub_wft to S. /* GEN_BY_SCRIPT 
	W: applys sub_wft S. */ 
	notAll: assert notAll_ Bs.
		W: case W1. % Manual Fix
		 apply subst_list_wft_det to _ _ SLb. search.
		 apply subst_list_wft_det to _ _ SLb. search.
		 apply subst_list_wft_det to _ _ SLb. search.
		% a
			M: apply append_mem_inv to A _. /* GEN_BY_SCRIPT 
		% a
			M: applys append_mem_inv A. */  M: case M.
			% false
				SL: apply subst_list_is_styvar_list to _ SLa. /* GEN_BY_SCRIPT 
			% false
				SL: applys subst_list_is_styvar_list SLa. */ 
				apply styvar_list_ty_false to _ M. /* GEN_BY_SCRIPT 
				applys styvar_list_ty_false M. */ 
			% a \in E
				apply subst_list_wft_det to Tys _ SLb. /* GEN_BY_SCRIPT 
			% a \in E
				applys subst_list_wft_det Tys SLb. */ 
				search.
		% ~a   false
			Eq: apply sub_B_sty_inv to _ S _. /* GEN_BY_SCRIPT 
		% ~a   false
			Eq: applys sub_B_sty_inv S. */  backchain sty_inst_list_wfj.
			Eq: case Eq.
		% ->
			SL: apply subst_list_arrow_split to SLb. /* GEN_BY_SCRIPT 
		% ->
			SL: applys subst_list_arrow_split SLb. */ 
			search.
		% forall
			apply notAll_false to S3. /* GEN_BY_SCRIPT 
		% forall
			applys notAll_false S3. */ 
	M: apply sty_inst_list_mono to _ _ _ _. /* GEN_BY_SCRIPT 
	M: applys sty_inst_list_mono. */ 
	SL: apply subst_list_ty_inst_mono to Tys SL _. /* GEN_BY_SCRIPT 
	SL: applys subst_list_ty_inst_mono Tys SL. */ 
	S: apply IH to _ _ _ _ _ S1. /* GEN_BY_SCRIPT 
	S: applys IH. */ 
	W: apply subst_list_SLE_wft to _ _ _ _ _. /* GEN_BY_SCRIPT 
	W: applys subst_list_SLE_wft. */  W: case W2.
	search.
% \forall a. A <: \forall a. B
	SLa: apply subst_list_all_match to SLa. /* GEN_BY_SCRIPT 
% \forall a. A <: \forall a. B
	SLa: applys subst_list_all_match SLa. */ 
	SLb: apply subst_list_all_match to SLb. /* GEN_BY_SCRIPT 
	SLb: applys subst_list_all_match SLb. */ 
	W: apply sub_wft to S. /* GEN_BY_SCRIPT 
	W: applys sub_wft S. */ 
	W: apply subst_list_SLE_wft to _ _ _ _ SLa. /* GEN_BY_SCRIPT 
	W: applys subst_list_SLE_wft SLa. */ 
	W: apply subst_list_SLE_wft to _ _ _ _ SLb. /* GEN_BY_SCRIPT 
	W: applys subst_list_SLE_wft SLb. */ 
	W: case W2. W: case W3.
	unfold (all). right.
	% C
		intros WC.
		Tys: assert sty_inst_list (styvar n1 :: SL) E (inst n1 C :: Tys).
		SLa: apply subst_list_ty_inst_wft to _ SLa1 WC. /* GEN_BY_SCRIPT 
		SLa: applys subst_list_ty_inst_wft WC SLa1. */ 
		SLb: apply subst_list_ty_inst_wft to _ SLb1 WC. /* GEN_BY_SCRIPT 
		SLb: applys subst_list_ty_inst_wft WC SLb1. */ 
		apply IH to _ _ Tys1 _ _ S1. /* GEN_BY_SCRIPT 
		applys IH Tys1. */  search.


Theorem sub_sound_wrt_stable : forall E A B,
	wfj E -> sub E A B -> sub_stable E A B.
intros. apply sub_sound_wrt_stable_trans to _ _ _ _ _ _. /* GEN_BY_SCRIPT  applys sub_sound_wrt_stable_trans. */  search.
